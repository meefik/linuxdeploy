#!/system/bin/sh
#
# Linux Deploy for Android
# (C) 2012-2014 Anton Skshidlevsky <meefik@gmail.com>
#

ENV_DIR="."

if [ -r "${ENV_DIR%/}/etc/deploy.conf" ]; then
	. ${ENV_DIR%/}/etc/deploy.conf
else
	echo "Configuration file not found!"
	exit 1
fi

PATH=${ENV_DIR%/}/bin:$PATH:/usr/bin:/bin:/usr/sbin:/sbin
TERM=vt100
export PATH TERM

exec 3>&1
[ "$DEBUG_MODE" != "y" ] && { exec 1>/dev/null; exec 2>/dev/null; }
[ "$TRACE_MODE" == "y" ] && set -x

cd $ENV_DIR
umask 0022

# This shell seems to be screwing things up with the
# built-in busybox shell. Lots of permissions errors.
if [ "$SHELL" = "/tmp-mksh/tmp-mksh" ]; then
  BIN_DIR="${ENV_DIR%/}/bin"
  if [ "$(readlink "${BIN_DIR}/sh")" = "${BIN_DIR}/busybox" ]; then
    rm "${BIN_DIR}/sh" || { echo "fail"; exit 1; }
    ln -s /system/bin/mksh "${BIN_DIR}/sh" || { echo "fail"; exit 1; }
  fi
  if [ "$(readlink "${BIN_DIR}/chroot")" = "${BIN_DIR}/busybox" ]; then
    if [ ! -e /system/xbin/busybox ]; then
      echo "Please install the latest busybox-armv7l to /system/xbin"
      exit 1
    fi
    # Older busybox versions and some busybox
    # installers seem to get chattr and chroot mixed up.
    if /system/xbin/busybox chroot @@@@@ 2>& 1 | grep -q -i "must use '-v'"; then
      echo "Please install the latest busybox-armv7l to /system/xbin"
      exit 1
    fi
    rm "${BIN_DIR}/chroot" || { echo "fail"; exit 1; }
    ln -s /system/xbin/busybox "${BIN_DIR}/chroot" || { echo "fail"; exit 1; }
  fi
fi

#################################################

msg()
{
	echo "$1" "$2" 1>&3
}

prepare_system()
{
	msg -n "Checking mount points ... "
	is_mnt=`cat /proc/mounts | grep " $MNT_TARGET "`
	[ -z "$is_mnt" ] && msg "done" || { msg "fail"; msg "Press STOP and repeat attempt."; return 1; }

	msg -n "Checking installation path ... "
	if [ "$DEPLOY_TYPE" == "file" ]; then
		if [ -e "$IMG_TARGET" -a ! -f "$IMG_TARGET" ]; then
			msg "fail"; return 1
		fi
	fi
	if [ "$DEPLOY_TYPE" == "partition" ]; then
		if [ ! -b "$IMG_TARGET" ]; then
			msg "fail"; return 1
		fi
	fi
	msg "done"

	if [ "$DEPLOY_TYPE" == "file" ]; then
		if [ "$IMG_SIZE" -eq 0 ]; then
			[ -f "$IMG_TARGET" ] && FILE_SIZE=`stat -c %s $IMG_TARGET` || FILE_SIZE=0
			DIR_NAME=`dirname $IMG_TARGET`
			BLOCK_SIZE=`stat -c %s -f $DIR_NAME`
			AVAILABLE_SIZE=`stat -c %a -f $DIR_NAME`
			let AVAILABLE_SIZE="($BLOCK_SIZE*$AVAILABLE_SIZE)+$FILE_SIZE"
			let IMG_SIZE="($AVAILABLE_SIZE-$AVAILABLE_SIZE/10)/1048576"
			[ "$IMG_SIZE" -gt 4095 ] && IMG_SIZE=4095
		fi
		msg -n "Making new disk image ($IMG_SIZE MB) ... "
		(set -e
			dd if=/dev/zero of=$IMG_TARGET bs=1048576 seek=$IMG_SIZE count=0 || dd if=/dev/zero of=$IMG_TARGET bs=1048576 count=$IMG_SIZE
		exit 0)
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }
	fi

	if [ "$DEPLOY_TYPE" == "file" -o "$DEPLOY_TYPE" == "partition" ]; then
		for fs in ext4 ext3 ext2
		do
			if [ -n "`cat /proc/filesystems | grep $fs`" ]; then
				fs_support=$fs
				break
			fi
		done
		[ -z "$fs_support" ] && { msg "The Linux kernel does not support filesystems ext2/ext3/ext4!"; return 1; }
		[ "$FS_TYPE" == "auto" ] && FS_TYPE=$fs_support
		
		msg -n "Making file system ($FS_TYPE) ... "
		(set -e
			is_loop=`losetup | grep $IMG_TARGET || true`
			is_raw=`cat /proc/mounts | grep $IMG_TARGET || true`
			[ -z "$is_loop" -a -z "$is_raw" ] && mke2fs -qF -t $FS_TYPE -O ^has_journal $IMG_TARGET
		exit 0)
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }
	fi

	return 0
}

configure_system()
{
	if [ "$#" -eq 0 ]; then
		msg "Configuring GNU/Linux system: "
		configure_system dns mtab motd hosts hostname timezone su sudo groups locales repository profile upstart dbus xorg packages
		return 0
	fi
	if [ "$#" -gt 1 ]; then
		for i in $*
		do
			configure_system $i
		done
		return 0
	fi

	msg -n "$1 ... "
	(set -e	
		case "$1" in
		dns)
			echo -n > $MNT_TARGET/etc/resolv.conf
			if [ -z "$SERVER_DNS" ]; then
				dns1=`getprop net.dns1`
				dns2=`getprop net.dns2`
				DNS_LIST="$dns1 $dns2"
				[ -z "$dns1" -a -z "$dns2" ] && DNS_LIST="8.8.8.8"
			else
				DNS_LIST=`echo $SERVER_DNS | tr ',;' ' '`
			fi
			for dns in $DNS_LIST
			do
				echo "nameserver $dns" >> $MNT_TARGET/etc/resolv.conf
			done
		;;
		mtab)
			#chroot $MNT_TARGET ln -sf /proc/mounts /etc/mtab
			rm -f $MNT_TARGET/etc/mtab || true
			cat /proc/mounts | grep $MNT_TARGET | sed "s|$MNT_TARGET/*|/|g" > $MNT_TARGET/etc/mtab
		;;
		motd)
			if [ -f $MNT_TARGET/etc/os-release ]
			then
				LINUX_VERSION=`source $MNT_TARGET/etc/os-release; echo $PRETTY_NAME`
			elif [ -f $MNT_TARGET/etc/arch-release ]
			then
				LINUX_VERSION="Arch Linux"
			elif [ -f $MNT_TARGET/etc/gentoo-release ]
			then
				LINUX_VERSION=`cat $MNT_TARGET/etc/gentoo-release`
			elif [ -f $MNT_TARGET/etc/fedora-release ]
			then
				LINUX_VERSION=`cat $MNT_TARGET/etc/fedora-release`
			elif [ -f $MNT_TARGET/etc/redhat-release ]
			then
				LINUX_VERSION=`cat $MNT_TARGET/etc/redhat-release`
			elif [ -f $MNT_TARGET/etc/debian_version ]
			then
				LINUX_VERSION=`printf "Debian GNU/Linux " ; cat $MNT_TARGET/etc/debian_version`
			fi
			#LINUX_VERSION=`chroot $MNT_TARGET lsb_release -d | sed 's|Description:[[:space:]]*||' || true`
			#LINUX_VERSION=`(. $MNT_TARGET/etc/os-release && echo $PRETTY_NAME) || true`
			[ -z "$LINUX_VERSION" ] && LINUX_VERSION="GNU/Linux ($DISTRIB)"
			MOTD="$LINUX_VERSION [running on Android via Linux Deploy]"
			rm -f $MNT_TARGET/etc/motd || true
			echo $MOTD > $MNT_TARGET/etc/motd
		;;
		hosts)
			is_localhost=`cat $MNT_TARGET/etc/hosts | grep "^127.0.0.1" || true`
			[ -z "$is_localhost" ] && echo '127.0.0.1 localhost' >> $MNT_TARGET/etc/hosts
		;;
		hostname)
			echo 'localhost' > $MNT_TARGET/etc/hostname
		;;
		timezone)
			TZ=`getprop persist.sys.timezone`
			[ -z "$TZ" ] && exit 1
			rm -f $MNT_TARGET/etc/localtime || true
			cp $MNT_TARGET/usr/share/zoneinfo/$TZ $MNT_TARGET/etc/localtime
			echo $TZ > $MNT_TARGET/etc/timezone
		;;
		su)
			case "$DISTRIB" in
			fedora|opensuse)
				PAM_SU="$MNT_TARGET/etc/pam.d/su-l"
			;;
			*)
				PAM_SU="$MNT_TARGET/etc/pam.d/su"
			;;
			esac
			if [ -z "`grep -e '^auth.*sufficient.*pam_succeed_if.so uid = 0 use_uid quiet$' $PAM_SU`" ]; then
				sed -i '1,/^auth/s/^\(auth.*\)$/auth\tsufficient\tpam_succeed_if.so uid = 0 use_uid quiet\n\1/' $PAM_SU
			fi
		;;
		sudo)
			SUDO_STR="$USER_NAME ALL=(ALL:ALL) NOPASSWD:ALL"
			is_str=`cat $MNT_TARGET/etc/sudoers | grep "$SUDO_STR" || true`
			[ -z "$is_str" ] && echo $SUDO_STR >> $MNT_TARGET/etc/sudoers
			chmod 440 $MNT_TARGET/etc/sudoers		
		;;
		groups)
			AIDS=`cat ${ENV_DIR%/}/deploy/android-groups`
			for AID in $AIDS
			do
				XNAME=`echo $AID | awk -F: '{print $1}'`
				XID=`echo $AID | awk -F: '{print $2}'`
				sed -i "s|^$XNAME:.*|$XNAME:x:$XID:$USER_NAME|g" $MNT_TARGET/etc/group || true
				is_str=`cat $MNT_TARGET/etc/group | grep "^$XNAME:" || true`
				[ -z "$is_str" ] && echo "$XNAME:x:$XID:$USER_NAME" >> $MNT_TARGET/etc/group
				is_str=`cat $MNT_TARGET/etc/passwd | grep "^$XNAME:" || true`
				[ -z "$is_str" ] && echo "$XNAME:x:$XID:$XID::/:/bin/false" >> $MNT_TARGET/etc/passwd
				sed -i 's|^UID_MIN.*|UID_MIN 5000|g' $MNT_TARGET/etc/login.defs
				sed -i 's|^GID_MIN.*|GID_MIN 5000|g' $MNT_TARGET/etc/login.defs
			done
			
			# Add users in aid_inet group
			case "$DISTRIB" in
			debian|ubuntu|kali)
				INET_USERS="messagebus www-data mysql postgres"
			;;
			archlinux)
				INET_USERS="dbus"
			;;
			fedora)
				INET_USERS="dbus"
			;;
			opensuse)
				INET_USERS="messagebus"
			;;			
			gentoo)
				INET_USERS="messagebus"
			;;
			esac
			for UID in $INET_USERS
			do
				if [ -z "`grep \"^aid_inet:.*$UID\" $MNT_TARGET/etc/group`" ]; then
					sed -i "s|^\(aid_inet:.*\)|\1,$UID|g" $MNT_TARGET/etc/group
				fi
			done
		;;
		locales)
			#echo "$LOCALE UTF-8" > $MNT_TARGET/etc/locale.gen
			#chmod 644 $MNT_TARGET/etc/locale.gen
			#chroot $MNT_TARGET locale-gen $LOCALE
			inputfile=`echo $LOCALE | awk -F. '{print $1}'`
			charmapfile=`echo $LOCALE | awk -F. '{print $2}'`
			chroot $MNT_TARGET localedef -i $inputfile -c -f $charmapfile $LOCALE
			case "$DISTRIB" in
			debian|ubuntu|kali)
				echo "LANG=$LOCALE" > $MNT_TARGET/etc/default/locale
			;;
			archlinux)
				echo "LANG=$LOCALE" > $MNT_TARGET/etc/locale.conf
			;;
			fedora)
				echo "LANG=$LOCALE" > $MNT_TARGET/etc/sysconfig/i18n
			;;
			opensuse)
				echo "RC_LANG=$LOCALE" > $MNT_TARGET/etc/sysconfig/language
			;;
			esac		
		;;
		repository)
			case "$DISTRIB" in
			debian|ubuntu|kali)
				if [ -e "$MNT_TARGET/etc/apt/sources.list" ]; then
					cp $MNT_TARGET/etc/apt/sources.list $MNT_TARGET/etc/apt/sources.list.bak
				else
					echo "# Generated by Linux Deploy" > $MNT_TARGET/etc/apt/sources.list
				fi
				if [ -z "`grep "$MIRROR.*$SUITE" $MNT_TARGET/etc/apt/sources.list`" ]; then
					case "$DISTRIB" in
					debian|kali)
						echo "deb $MIRROR $SUITE main contrib non-free" >> $MNT_TARGET/etc/apt/sources.list
						echo "deb-src $MIRROR $SUITE main contrib non-free" >> $MNT_TARGET/etc/apt/sources.list
					;;
					ubuntu)
						echo "deb $MIRROR $SUITE main universe multiverse" >> $MNT_TARGET/etc/apt/sources.list
						echo "deb-src $MIRROR $SUITE main universe multiverse" >> $MNT_TARGET/etc/apt/sources.list
					;;
					esac
				fi
			;;
			archlinux)
				sed -i "s|^[[:space:]]*Architecture[[:space:]]*=.*$|Architecture = $ARCH|" $MNT_TARGET/etc/pacman.conf
				sed -i "s|^[[:space:]]*\(CheckSpace\)|#\1|" $MNT_TARGET/etc/pacman.conf
				sed -i "s|^[[:space:]]*SigLevel[[:space:]]*=.*$|SigLevel = Never|" $MNT_TARGET/etc/pacman.conf
				sed -i "s|^[[:space:]]*Server[[:space:]]*=.*|Server = $MIRROR/$ARCH/\$repo|" $MNT_TARGET/etc/pacman.d/mirrorlist
			;;
			fedora)
				find $MNT_TARGET/etc/yum.repos.d/ -name *.repo | while read f; do sed -i 's/^enabled=.*/enabled=0/g' $f; done
				REPO_FILE="$MNT_TARGET/etc/yum.repos.d/fedora-${SUITE}-${ARCH}.repo"
				echo "[fedora-${SUITE}-${ARCH}]" > $REPO_FILE
				echo "name=Fedora ${SUITE} - ${ARCH}" >> $REPO_FILE
				echo "failovermethod=priority" >> $REPO_FILE
				echo "baseurl=${MIRROR%/}/${SUITE}/Everything/${ARCH}/os/" >> $REPO_FILE
				echo "enabled=1" >> $REPO_FILE
				echo "metadata_expire=7d" >> $REPO_FILE
				echo "gpgcheck=0" >> $REPO_FILE
				chmod 644 $REPO_FILE
			;;
			opensuse)
				REPO_NAME="openSUSE-${SUITE}-${ARCH}-Repo-OSS"
				REPO_FILE="$MNT_TARGET/etc/zypp/repos.d/${REPO_NAME}.repo"
				echo "[${REPO_NAME}]" > $REPO_FILE 
				echo "name=${REPO_NAME}" >> $REPO_FILE
				echo "enabled=1" >> $REPO_FILE
				echo "autorefresh=0" >> $REPO_FILE
				echo "baseurl=${MIRROR%/}/${ARCH}/${SUITE}/repo/oss/" >> $REPO_FILE
				echo "type=NONE" >> $REPO_FILE
				chmod 644 $REPO_FILE
			;;
			gentoo)
				if [ -z "`grep '^aid_inet:.*,portage' $MNT_TARGET/etc/group`" ]; then
					sed -i "s|^\(aid_inet:.*\)|\1,portage|g" $MNT_TARGET/etc/group
				fi
				# set MAKEOPTS
				NUMBER_OF_CPU=`cat /proc/cpuinfo | grep ^processor | wc -l`
				let NUMBER_OF_CPU=$NUMBER_OF_CPU+1
				if [ -z "`grep '^MAKEOPTS=' $MNT_TARGET/etc/portage/make.conf`" ]; then
					echo "MAKEOPTS=\"-j$NUMBER_OF_CPU\"" >> $MNT_TARGET/etc/portage/make.conf
				fi
			;;
			esac
		;;
		profile)
			reserved=`echo $USER_NAME | grep ^aid_ || true`
			if [ -n "$reserved" ]; then
				echo "Username $USER_NAME is reserved!"
				exit 1
			fi
			if [ "$USER_NAME" != "root" ]; then
				chroot $MNT_TARGET groupadd $USER_NAME || true
				chroot $MNT_TARGET useradd -m -g $USER_NAME -s /bin/bash $USER_NAME || true
				chroot $MNT_TARGET usermod -g $USER_NAME $USER_NAME || true
			fi
			# Set default password for $USER_NAME
			PASSWORD="changeme"
			chroot $MNT_TARGET sh -c "printf '%s\n' $PASSWORD $PASSWORD | passwd $USER_NAME"
			USER_HOME=`cat $MNT_TARGET/etc/passwd | grep -m1 "^$USER_NAME:" | awk -F: '{print $6}'`
			USER_ID=`cat $MNT_TARGET/etc/passwd | grep -m1 "^$USER_NAME:" | awk -F: '{print $3}'`
			GROUP_ID=`cat $MNT_TARGET/etc/passwd | grep -m1 "^$USER_NAME:" | awk -F: '{print $4}'`
			PROFILE_STR='PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
			 is_str=`cat $MNT_TARGET$USER_HOME/.profile | grep "$PROFILE_STR" || true`
			[ -z "$is_str" ] && echo $PROFILE_STR >> $MNT_TARGET$USER_HOME/.profile
			# gui
			mkdir $MNT_TARGET$USER_HOME/.vnc || true
			echo "MPTcXfgXGiY=" | base64 -d > $MNT_TARGET$USER_HOME/.vnc/passwd
			chmod 600 $MNT_TARGET$USER_HOME/.vnc/passwd
			if [ "$DESKTOP_ENV" != "other" ]; then
				echo 'XAUTHORITY=$HOME/.Xauthority' > $MNT_TARGET$USER_HOME/.vnc/xstartup
				echo 'export XAUTHORITY' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				echo "LANG=$LOCALE" >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				echo 'export LANG' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				#echo '(sleep 5 && xrefresh)&' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				echo 'echo $$ > /tmp/xsession.pid' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				case "$DESKTOP_ENV" in
				xterm)
					echo 'xterm -max' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				;;
				lxde)
					echo 'startlxde' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				;;
				xfce)
					echo 'startxfce4' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				;;
				gnome)
					echo 'XKL_XMODMAP_DISABLE=1' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo 'export XKL_XMODMAP_DISABLE' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo 'if [ -n "`gnome-session -h | grep "\-\-session"`" ]; then' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo '   gnome-session --session=gnome' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo 'else' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo '   gnome-session' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo 'fi' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				;;
				kde)
					echo 'startkde' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				;;
				esac
				chmod 755 $MNT_TARGET$USER_HOME/.vnc/xstartup
				rm $MNT_TARGET$USER_HOME/.xinitrc || true
				ln -s ./.vnc/xstartup $MNT_TARGET$USER_HOME/.xinitrc
			fi
			chown -R $USER_ID:$GROUP_ID $MNT_TARGET$USER_HOME || true
		;;
		upstart)
			if [ -e "$MNT_TARGET/sbin/initctl" ]; then
				chroot $MNT_TARGET dpkg-divert --local --rename --add /sbin/initctl
				chroot $MNT_TARGET ln -s /bin/true /sbin/initctl
			fi
		;;
		dbus)
			case "$DISTRIB" in
			debian|ubuntu|kali|archlinux)
				mkdir $MNT_TARGET/run/dbus || true
				chmod 755 $MNT_TARGET/run/dbus
			;;
			fedora)
				mkdir $MNT_TARGET/var/run/dbus || true
				chmod 755 $MNT_TARGET/var/run/dbus
				chroot $MNT_TARGET sh -c "dbus-uuidgen > /etc/machine-id"
			;;
			esac
		;;
		xorg)
			# Xwrapper.config
			case "$DISTRIB" in
			debian|ubuntu|kali)
				mkdir -p $MNT_TARGET/etc/X11
				if [ -n "`grep -e '^allowed_users' $MNT_TARGET/etc/X11/Xwrapper.config`" ]; then
					sed -i 's/^allowed_users=.*/allowed_users=anybody/g' $MNT_TARGET/etc/X11/Xwrapper.config
				else
					echo "allowed_users=anybody" >> $MNT_TARGET/etc/X11/Xwrapper.config
				fi
			;;
			gentoo)
				# set Xorg make configuration
				if [ -z "`grep '^INPUT_DEVICES=' $MNT_TARGET/etc/portage/make.conf`" ]; then
					echo 'INPUT_DEVICES="evdev"' >> $MNT_TARGET/etc/portage/make.conf
				else
					sed -i 's|^\(INPUT_DEVICES=.*\)|\1"evdev"|g' $MNT_TARGET/etc/portage/make.conf
				fi
				if [ -z "`grep '^VIDEO_CARDS=' $MNT_TARGET/etc/portage/make.conf`" ]; then
					echo 'VIDEO_CARDS="fbdev"' >> $MNT_TARGET/etc/portage/make.conf
				else
					sed -i 's|^\(VIDEO_CARDS=.*\)|\1"fbdev"|g' $MNT_TARGET/etc/portage/make.conf
				fi
			;;
			opensuse)
				[ -e "$MNT_TARGET/usr/bin/Xorg" ] && chmod +s $MNT_TARGET/usr/bin/Xorg
			;;
			esac
			# xorg.conf
			mkdir -p $MNT_TARGET/etc/X11
			XORG_CONF="$MNT_TARGET/etc/X11/xorg.conf"
			[ -e "$XORG_CONF" ] && cp ${XORG_CONF} ${XORG_CONF}.bak
			cp $ENV_DIR/deploy/xorg.conf $XORG_CONF
			chmod 644 $XORG_CONF
		;;
		esac
	exit 0)
	[ $? -eq 0 ] && msg "done" || msg "fail"

	if [ "$1" == "packages" ]; then
		msg "Installing additional packages: "
		(set -e
			case "$DISTRIB" in
			debian|ubuntu|kali)
				PKGS=""
				[ -e "/sys/fs/selinux/enforce" ] && PKGS="selinux-policy-default"
				for component in $COMPONENTS
				do
					case "$component" in
					desktop)
						PKGS="$PKGS desktop-base x11-xserver-utils xfonts-base"
						[ "$DISTRIB" == "kali" ] && PKGS="$PKGS kali-defaults kali-menu"
						case "$DESKTOP_ENV" in
						xterm)
							PKGS="$PKGS xterm"
						;;
						lxde)
							PKGS="$PKGS lxde menu-xdg hicolor-icon-theme gtk2-engines"
						;;
						xfce)
							PKGS="$PKGS xfce4 tango-icon-theme hicolor-icon-theme"
						;;
						gnome)
							PKGS="$PKGS gnome-core"
						;;
						kde)
							PKGS="$PKGS kde-standard"
						;;
						esac
					;;
					ssh)
						PKGS="$PKGS openssh-server"
					;;
					vnc)
						PKGS="$PKGS tightvncserver"
					;;
					xserver)
						PKGS="$PKGS xinit xserver-xorg xserver-xorg-video-fbdev xserver-xorg-input-evdev"
					;;
					kali-linux)
						PKGS="$PKGS kali-linux"
					;;
					esac
				done
				export DEBIAN_FRONTEND=noninteractive
				chroot $MNT_TARGET apt-get update -yq
				chroot $MNT_TARGET apt-get install $PKGS --no-install-recommends -yq
				chroot $MNT_TARGET apt-get clean
			;;
			archlinux)
				PKGS=""
				for component in $COMPONENTS
				do
					case "$component" in
					desktop)
						PKGS="$PKGS xorg-utils xorg-fonts-misc ttf-dejavu"
						case "$DESKTOP_ENV" in
						xterm)
							PKGS="$PKGS xterm"
						;;
						lxde)
							PKGS="$PKGS lxde gtk-engines"
						;;
						xfce)
							PKGS="$PKGS xfce4"
						;;
						gnome)
							PKGS="$PKGS gnome"
						;;
						kde)
							PKGS="$PKGS kdebase"
						;;
						esac
					;;
					ssh)
						PKGS="$PKGS openssh"
					;;
					vnc)
						PKGS="$PKGS tigervnc"
					;;
					xserver)
						PKGS="$PKGS xorg-xinit xorg-server xf86-video-fbdev xf86-input-evdev"
					;;
					esac
				done
				#rm -f $MNT_TARGET/var/lib/pacman/db.lck || true
				chroot $MNT_TARGET pacman -Syq --noconfirm $PKGS
				rm -f $MNT_TARGET%/}/var/cache/pacman/pkg/* || true
			;;
			fedora)
				PKGS=""
				for component in $COMPONENTS
				do
					case "$component" in
					desktop)
						PKGS="$PKGS xorg-x11-server-utils xorg-x11-fonts-misc dejavu-*"
						case "$DESKTOP_ENV" in
						xterm)
							PKGS="$PKGS xterm"
						;;
						lxde)
							IGRP="LXDE"
						;;
						xfce)
							IGRP="XFCE"
						;;
						gnome)
							IGRP="GNOME"
						;;
						kde)
							PKGS="$PKGS kde-baseapps kde-workspace ark konsole gwenview"
						;;
						esac
					;;
					ssh)
						PKGS="$PKGS openssh-server"
					;;
					vnc)
						PKGS="$PKGS tigervnc-server"
					;;
					xserver)
						PKGS="$PKGS xorg-x11-xinit xorg-x11-server-Xorg xorg-x11-drv-fbdev xorg-x11-drv-evdev"
					;;
					esac
				done
				chroot $MNT_TARGET yum install $PKGS --nogpgcheck --skip-broken -y
				[ -n "$IGRP" ] && chroot $MNT_TARGET yum groupinstall "$IGRP" --nogpgcheck --skip-broken -y
				chroot $MNT_TARGET yum clean all
			;;
			opensuse)
				PKGS=""
				for component in $COMPONENTS
				do
					case "$component" in
					desktop)
						PKGS="$PKGS xorg-x11-fonts-core dejavu-fonts xauth"
						case "$DESKTOP_ENV" in
						xterm)
							PKGS="$PKGS xterm"
						;;
						lxde)
							PKGS="$PKGS patterns-openSUSE-lxde"
						;;
						xfce)
							PKGS="$PKGS patterns-openSUSE-xfce"
						;;
						gnome)
							PKGS="$PKGS patterns-openSUSE-gnome"
						;;
						kde)
							PKGS="$PKGS patterns-openSUSE-kde"
						;;
						esac
					;;
					ssh)
						PKGS="$PKGS openssh"
					;;
					vnc)
						PKGS="$PKGS tightvnc"
					;;
					xserver)
						PKGS="$PKGS xinit xorg-x11-server xf86-video-fbdev xf86-input-evdev"
					;;
					esac
				done
				chroot $MNT_TARGET zypper --no-gpg-checks --non-interactive install $PKGS
				chroot $MNT_TARGET zypper clean
			;;
			gentoo)
				PKGS=""
				for component in $COMPONENTS
				do
					case "$component" in
					desktop)
						PKGS="$PKGS xauth"
						case "$DESKTOP_ENV" in
						xterm)
							PKGS="$PKGS xterm"
						;;
						lxde)
							PKGS="$PKGS lxde-meta gtk-engines"
						;;
						xfce)
							PKGS="$PKGS xfce4-meta"
						;;
						gnome)
							PKGS="$PKGS gnome"
						;;
						kde)
							PKGS="$PKGS kde-meta"
						;;
						esac
					;;
					ssh)
						PKGS="$PKGS openssh"
					;;
					vnc)
						# set server USE flag for tightvnc
						if [ -z "`grep '^net-misc/tightvnc' $MNT_TARGET/etc/portage/package.use`" ]; then
							echo "net-misc/tightvnc server" >> $MNT_TARGET/etc/portage/package.use
						fi
						if [ -z "`grep '^net-misc/tightvnc.*server' $MNT_TARGET/etc/portage/package.use`" ]; then
							sed -i "s|^\(net-misc/tightvnc.*\)|\1 server|g" $MNT_TARGET/etc/portage/package.use
						fi
						PKGS="$PKGS tightvnc"
					;;
					xserver)
						PKGS="$PKGS xinit xorg-server"
					;;
					esac
				done
				chroot $MNT_TARGET emerge --autounmask-write $PKGS || {
					mv $MNT_TARGET/etc/portage/._cfg0000_package.use $MNT_TARGET/etc/portage/package.use
					chroot $MNT_TARGET emerge --update --deep --newuse $PKGS
				}
			;;
			*)
				msg " ...not supported"
			;;
			esac
		exit 0) 1>&3 2>&3
		[ $? -ne 0 ] && return 1
	fi

	return 0
}

update_system()
{
	msg "Updating configuration: "
	configure_system dns mtab
	[ $? -ne 0 ] && return 1

	return 0
}

mount_system()
{
	if [ "$#" -eq 0 ]; then
		msg "Mounting partitions: "
		mount_system root proc sys selinux dev pts shm custom
		return $?
	fi
	if [ "$#" -gt 1 ]; then
		for i in $*
		do
			mount_system $i
			[ $? -eq 0 ] || return 1
		done
		return 0
	fi

	case "$1" in
	root)
		msg -n "/ ... "
		is_mnt=`cat /proc/mounts | grep " $MNT_TARGET "`
		if [ -z "$is_mnt" ]; then
			[ ! -d "$MNT_TARGET" ] && mkdir -p $MNT_TARGET
			[ -d "$IMG_TARGET" ] && MNT_OPTS="bind" || MNT_OPTS="rw,relatime"
			mount -o $MNT_OPTS $IMG_TARGET $MNT_TARGET
			if [ $? -eq 0 ]; then
				msg "done"
			else
				msg "fail"; return 1
			fi
		else
			msg "skip"
		fi
	;;
	proc)
		msg -n "/proc ... "
		tg=$MNT_TARGET/proc; is_mnt=`cat /proc/mounts | grep " $tg "`
		if [ -z "$is_mnt" ]; then
			[ ! -d "$tg" ] && mkdir -p $tg
			mount -t proc proc $tg
			[ $? -eq 0 ] && msg "done" || msg "fail"
		else
			msg "skip"
		fi
	;;
	sys)
		msg -n "/sys ... "
		tg=$MNT_TARGET/sys; is_mnt=`cat /proc/mounts | grep " $tg "`
		if [ -z "$is_mnt" ]; then
			[ ! -d "$tg" ] && mkdir -p $tg
			mount -t sysfs sys $tg
			[ $? -eq 0 ] && msg "done" || msg "fail"
		else
			msg "skip"
		fi
	;;
	selinux)
		msg -n "/sys/fs/selinux ... "
		tg=$MNT_TARGET/sys/fs/selinux; is_mnt=`cat /proc/mounts | grep " $tg "`
		if [ -z "$is_mnt" -a -d "/sys/fs/selinux" ]; then
			[ -e "/sys/fs/selinux/enforce" ] && echo 0 > /sys/fs/selinux/enforce
			mount -t selinuxfs selinuxfs $tg
			mount -o remount,ro,bind $tg
			[ $? -eq 0 ] && msg "done" || msg "fail"
		else
			msg "skip"
		fi
	;;
	dev)
		msg -n "/dev ... "
		tg=$MNT_TARGET/dev; is_mnt=`cat /proc/mounts | grep " $tg "`
		if [ -z "$is_mnt" ]; then
			[ ! -d "$tg" ] && mkdir -p $tg
			mount -o bind /dev $tg
			[ $? -eq 0 ] && msg "done" || msg "fail"
			# links
			ln -s /proc/self/fd $MNT_TARGET/dev/
			ln -s /proc/self/fd/0 $MNT_TARGET/dev/stdin
			ln -s /proc/self/fd/1 $MNT_TARGET/dev/stdout
			ln -s /proc/self/fd/2 $MNT_TARGET/dev/stderr
		else
			msg "skip"
		fi
	;;
	pts)
		msg -n "/dev/pts ... "
		tg=$MNT_TARGET/dev/pts; is_mnt=`cat /proc/mounts | grep " $tg "`
		if [ -z "$is_mnt" ]; then
			[ ! -d "$tg" ] && mkdir -p $tg
			mount -o "mode=0620,gid=5" -t devpts devpts $tg
			[ $? -eq 0 ] && msg "done" || msg "fail"
		else
			msg "skip"
		fi
	;;
	shm)
		msg -n "/dev/shm ... "
		tg=$MNT_TARGET/dev/shm; is_mnt=`cat /proc/mounts | grep " $tg "`
		if [ -z "$is_mnt" ]; then
			[ ! -d "$tg" ] && mkdir -p $tg
			mount -t tmpfs tmpfs $tg
			[ $? -eq 0 ] && msg "done" || msg "fail"
		else
			msg "skip"
		fi
	;;
	custom)
		for disk in $CUSTOM_MOUNTS
		do
			disk_name=`basename /root/$disk`
			msg -n "/mnt/$disk_name ... "
			tg=$MNT_TARGET/mnt/$disk_name
			is_tg=`cat /proc/mounts | grep " $tg "`
			if [ -z "$is_tg" -a -d "$disk" ]; then
				[ ! -d "$tg" ] && mkdir -p $tg
				mount -o bind $disk $tg
				[ $? -eq 0 ] && msg "done" || msg "fail"
				continue
			fi
			if [ -z "$is_tg" -a -e "$disk" ]; then
				[ ! -d "$tg" ] && mkdir -p $tg
				mount -o rw,relatime $disk $tg
				[ $? -eq 0 ] && msg "done" || msg "fail"
			else
				msg "skip"
			fi
		done
	;;
	esac

	return 0
}

umount_system()
{
	msg -n "Release resources ... "
	(set -e
		for i in 1 2 3 4
		do
			[ "$i" -gt "3" ] && exit 1
			pids=`lsof | grep $MNT_TARGET | awk '{print $1}' | uniq || true`
			if [ -n "$pids" ]; then
				kill -9 $pids || true
				sleep 1
			else
				break
			fi
		done
	exit 0)
	[ $? -eq 0 ] && msg "done" || msg "fail"

	msg "Unmounting partitions: "
	um=0
	for i in '.*' '*'
	do
		parts=`cat /proc/mounts | awk '{print $2}' | grep "^$MNT_TARGET/$i$" | sort -r`
		for p in $parts
		do
			pp=`echo $p | sed "s|$MNT_TARGET/*|/|g"`
			msg -n "$pp ... "
			umount $p
			[ $? -eq 0 ] && msg "done" || msg "fail"
			um=1
		done
	done
	[ $um -eq 0 ] && msg "...not mounted anything"

	msg -n "Disassociating loop device ... "
	(set -e
		loop=`losetup | grep $IMG_TARGET | awk -F: '{print $1}' || true`
		[ -n "$loop" ] && losetup -d $loop
	exit 0)
	[ $? -eq 0 ] && msg "done" || msg "fail"

	return 0
}

start_system()
{
	if [ "$#" -eq 0 ]; then
		mount_system
		[ $? -ne 0 ] && return 1

		update_system
	
		msg "Starting services: "
		
		for i in $STARTUP
		do
			start_system $i
			[ $? -eq 0 ] || return 1
		done
		
		[ -z "$STARTUP" ] && msg "...no active services"
		
		return 0
	fi
	
	dbus_init()
	{
		# dbus (Debian/Ubuntu/Arch Linux/Kali Linux)
		[ -e "$MNT_TARGET/run/dbus/pid" ] && rm $MNT_TARGET/run/dbus/pid
		# dbus (Fedora)
		[ -e "$MNT_TARGET/var/run/messagebus.pid" ] && rm $MNT_TARGET/var/run/messagebus.pid
		chroot $MNT_TARGET dbus-daemon --system --fork || true
	}
	
	case "$1" in
	ssh)
		msg -n "SSH :$SSH_PORT ... "
		if [ -z "`ps | grep -E '/usr/s?bin/sshd' | grep -v grep`" ]; then
			sed -i "s|^Port .*|Port $SSH_PORT|g" $MNT_TARGET/etc/ssh/sshd_config
			(set -e
				# Debian/Ubuntu/Kali Linux
				if [ -e "$MNT_TARGET/etc/init.d/ssh" ]; then
					chroot $MNT_TARGET su - root -c '/etc/init.d/ssh start'
					exit 0
				fi
				# Arch Linux/Fedora/openSUSE/Gentoo
				if [ -z "`ls $MNT_TARGET/etc/ssh/ | grep key`" ]; then
					chroot $MNT_TARGET su - root -c 'ssh-keygen -A' || true
					echo
				fi
				chroot $MNT_TARGET su - root -c '`which sshd`'
			exit 0)
			[ $? -eq 0 ] && msg "done" || msg "fail"
		else
			msg "skip"
		fi
	;;
	vnc)
		let vncport=5900+$VNC_DISPLAY
		msg -n "VNC :$vncport ... "
		XPID=`cat $MNT_TARGET/tmp/xsession.pid`
		[ -n "$XPID" ] && XSESSION=`ps | grep "^$XPID "`
		if [ -z "$XSESSION" ]; then
			(set -e
				dbus_init
				VNC_ARGS=""
				# TightVNC Server
				which Xtightvnc && VNC_ARGS="$VNC_ARGS -compatiblekbd" || true
				[ -e "$MNT_TARGET/tmp/.X$VNC_DISPLAY-lock" ] && rm $MNT_TARGET/tmp/.X$VNC_DISPLAY-lock
				[ -e "$MNT_TARGET/tmp/.X11-unix/X$VNC_DISPLAY" ] && rm $MNT_TARGET/tmp/.X11-unix/X$VNC_DISPLAY
				chroot $MNT_TARGET su - $USER_NAME -c "vncserver :$VNC_DISPLAY -depth $VNC_DEPTH -geometry $VNC_GEOMETRY -dpi $VNC_DPI $VNC_ARGS"
			exit 0)
			[ $? -eq 0 ] && msg "done" || msg "fail"
		else
			msg "skip"
		fi
	;;
	xserver)
		msg -n "X Window System ... "
		XPID=`cat $MNT_TARGET/tmp/xsession.pid`
		[ -n "$XPID" ] && XSESSION=`ps | grep "^$XPID "`
		if [ -z "$XSESSION" ]; then
			(set -e
				dbus_init
				chroot $MNT_TARGET su - $USER_NAME -c "export DISPLAY=$XSERVER_HOST:$XSERVER_DISPLAY; ~/.xinitrc &"
			exit 0)
			[ $? -eq 0 ] && msg "done" || msg "fail"
		else
			msg "skip"
		fi	
	;;
	framebuffer)
		msg -n "Frame Buffer ... "
		XPID=`cat $MNT_TARGET/tmp/xsession.pid`
		[ -n "$XPID" ] && XSESSION=`ps | grep "^$XPID "`
		if [ -z "$XSESSION" ]; then
			sed -i "s|Option.*\"fbdev\".*#linuxdeploy|Option \"fbdev\" \"$FB_DEV\" #linuxdeploy|g" $MNT_TARGET/etc/X11/xorg.conf
			sed -i "s|Option.*\"Device\".*#linuxdeploy|Option \"Device\" \"$FB_INPUT\" #linuxdeploy|g" $MNT_TARGET/etc/X11/xorg.conf
			(set -e
				dbus_init
				sync
				case "$FB_FREEZE" in
				stop)
					setprop ctl.stop surfaceflinger
					chroot $MNT_TARGET su - $USER_NAME -c "xinit -- :$FB_DISPLAY -dpi $FB_DPI $FB_ARGS"
					sync
					reboot				
				;;
				pause)
					pkill -STOP system_server
					pkill -STOP surfaceflinger
					chroot $MNT_TARGET su - $USER_NAME -c "xinit -- :$FB_DISPLAY -dpi $FB_DPI $FB_ARGS"
					pkill -CONT surfaceflinger
					pkill -CONT system_server
				;;
				*)
					chroot $MNT_TARGET su - $USER_NAME -c "xinit -- :$FB_DISPLAY -dpi $FB_DPI $FB_ARGS &"
				;;
				esac
			exit 0)
			[ $? -eq 0 ] && msg "done" || msg "fail"
		else
			msg "skip"
		fi	
	;;
	custom)
		for script in $CUSTOM_SCRIPTS
		do
			msg -n "$script ... "
			(set -e
				chroot $MNT_TARGET su - root -c "$script start"
			exit 0)
			[ $? -eq 0 ] && msg "done" || msg "fail"
		done	
	;;
	esac

	return 0
}

stop_system()
{
	if [ "$#" -eq 0 ]; then
		msg "Stopping services: "
		
		for i in $STARTUP
		do
			stop_system $i
			[ $? -eq 0 ] || return 1
		done
		
		[ -z "$STARTUP" ] && msg "...no active services"
		
		umount_system
		[ $? -ne 0 ] && return 1 || return 0
	fi

	case "$1" in
	ssh)
		msg -n "SSH ... "
		(set -e
			# Debian/Ubuntu/Kali Linux
			if [ -e "$MNT_TARGET/etc/init.d/ssh" ]; then
				chroot $MNT_TARGET su - root -c "/etc/init.d/ssh stop"
			fi
			# Arch Linux/Fedora/openSUSE/Gentoo
			if [ -e "$MNT_TARGET/var/run/sshd.pid" ]; then
				chroot $MNT_TARGET su - root -c 'kill -9 $(cat /var/run/sshd.pid)'
			fi
			# kill active sessions
			sleep 1
			pkill -9 'sshd' || true
		exit 0)
		[ $? -eq 0 ] && msg "done" || msg "fail"
	;;
	vnc)
		msg -n "VNC ... "
		(set -e
			chroot $MNT_TARGET su - $USER_NAME -c "vncserver -kill :$VNC_DISPLAY"
			sleep 1
			pkill -9 'X.*vnc' || true
		exit 0)
		[ $? -eq 0 ] && msg "done" || msg "fail"
	;;
	xserver)
		msg -n "X Window System ... "
		(set -e
			chroot $MNT_TARGET su - $USER_NAME -c 'kill -9 $(cat /tmp/xsession.pid)'
		exit 0)
		[ $? -eq 0 ] && msg "done" || msg "fail"
	;;
	framebuffer)
		msg -n "Frame Buffer ... "
		(set -e
			pkill -CONT surfaceflinger
			pkill -CONT system_server
			chroot $MNT_TARGET su - $USER_NAME -c 'kill -9 $(cat /tmp/xsession.pid)'
		exit 0)
		[ $? -eq 0 ] && msg "done" || msg "fail"
	;;
	custom)
		for script in $CUSTOM_SCRIPTS
		do
			msg -n "$script ... "
			(set -e
				chroot $MNT_TARGET su - root -c "$script stop"
			exit 0)
			[ $? -eq 0 ] && msg "done" || msg "fail"
		done	
	;;
	esac

	return 0
}

chroot_system()
{
	is_mnt=`cat /proc/mounts | grep " $MNT_TARGET "`
	if [ -z "$is_mnt" ]; then
		mount_system
		[ $? -ne 0 ] && return 1
	fi

	update_system
	
	[ -e "$MNT_TARGET/etc/motd" ] && msg "$(cat $MNT_TARGET/etc/motd)"
	
	SHELL=$1
	if [ -z "$SHELL" ]; then
		[ -e "$MNT_TARGET/bin/sh" ] && SHELL=/bin/sh
		[ -e "$MNT_TARGET/bin/bash" ] && SHELL=/bin/bash
	fi
	[ -z "$SHELL" ] && { msg "Shell not found!"; return 1; }

	chroot $MNT_TARGET $SHELL 1>&3 2>&3
	[ $? -ne 0 ] && return 1

	return 0
}

install_system()
{
	prepare_system
	[ $? -ne 0 ] && return 1

	msg "Mounting partitions: "
	mount_system root
	[ $? -ne 0 ] && return 1

	case "$DISTRIB" in
	debian|ubuntu|kali)
		msg "Installing Debian-based distribution: "

		BASIC_PACKAGES="locales,sudo,man-db"

		[ -z "$DEBOOTSTRAP_DIR" ] && DEBOOTSTRAP_DIR=${ENV_DIR%/}/deploy/debootstrap
		export DEBOOTSTRAP_DIR
		debootstrap --no-check-gpg --arch $ARCH --foreign --extractor=ar --include=$BASIC_PACKAGES $SUITE $MNT_TARGET $MIRROR 1>&3 2>&3
		[ $? -ne 0 ] && return 1

		unset DEBOOTSTRAP_DIR
		chroot $MNT_TARGET /debootstrap/debootstrap --second-stage 1>&3 2>&3
		[ $? -ne 0 ] && return 1

		msg "Mounting partitions: "
		mount_system proc sys selinux dev pts shm
	;;
	archlinux)
		msg "Installing Arch Linux distribution: "

		BASIC_PACKAGES="acl archlinux-keyring attr bash bzip2 ca-certificates coreutils cracklib curl db dirmngr e2fsprogs expat findutils gawk gcc-libs gdbm glibc gmp gnupg gpgme grep keyutils krb5 libarchive libassuan libcap libgcrypt libgpg-error libgssglue libksba libldap libsasl libssh2 libtirpc linux-api-headers lzo2 ncurses openssl pacman pacman-mirrorlist pam pambase perl pinentry pth readline run-parts sed shadow sudo tzdata util-linux xz zlib"
		REPO="${MIRROR%/}/$ARCH/core"
		CACHE_DIR="$MNT_TARGET/var/cache/pacman/pkg"

		msg -n "Preparing for deployment ... "
		(set -e
			cd $MNT_TARGET
			mkdir etc
			echo "root:x:0:0:root:/root:/bin/bash" > etc/passwd
			echo "root:x:0:" > etc/group
			touch etc/fstab
			mkdir tmp; chmod 01777 tmp
			ln -s usr/lib lib
			mkdir -p $CACHE_DIR
		exit 0)
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }

		msg -n "Retrieving packages list ... "
		PKG_LIST=`wget -q -O - "$REPO/" | sed -n '/<a / s/^.*<a [^>]*href="\([^\"]*\)".*$/\1/p' | awk -F'/' '{print $NF}' | sort -rn`
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }

		msg "Retrieving base packages: "
		for PACKAGE in $BASIC_PACKAGES; do
			msg -n "$PACKAGE ... "
    			FILE=`echo "$PKG_LIST" | grep -m1 -e "^$PACKAGE-[[:digit:]].*\.xz$" -e "^$PACKAGE-[[:digit:]].*\.gz$"`
    			test "$FILE" || { msg "fail"; return 1; }
    			#echo "downloading ${FILE}... "
    			for i in 1 2 3
    			do
    				wget -q -c -O $CACHE_DIR/$FILE $REPO/$FILE
    				[ $? -eq 0 ] && break || sleep 30s
    			done
    			#echo "unpacking ${FILE}... "
			case "$FILE" in
			*.gz) tar xzf $CACHE_DIR/$FILE -C $MNT_TARGET;;
			*.xz) xz -dc $CACHE_DIR/$FILE | tar x -C $MNT_TARGET;;
			*) msg "fail"; return 1;;
			esac
			[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }
		done

		msg "Mounting partitions: "
		mount_system proc sys selinux dev pts shm

		msg "Preconfigure system: "
		configure_system dns mtab repository

		msg "Installing base packages: "
		(set -e
			chroot $MNT_TARGET /usr/bin/pacman --noconfirm -Sy
			EXTRA_PACKAGES=`chroot $MNT_TARGET /usr/bin/pacman --noconfirm -Sg base | awk '{print $2}' | grep -v -e 'linux' -e 'kernel'`
			chroot $MNT_TARGET /usr/bin/pacman --noconfirm --force -Sq $BASIC_PACKAGES $EXTRA_PACKAGES
		exit 0) 1>&3 2>&3
		[ $? -ne 0 ] && return 1

		msg -n "Clearing cache ... "
		(set -e
			rm -f $CACHE_DIR/* `find $MNT_TARGET -type f -name "*.pacorig"`
		exit 0)
		[ $? -eq 0 ] && msg "done" || msg "fail"
	;;
	fedora)
		msg "Installing Fedora distribution: "

		case "$SUITE" in
		17)
			BASIC_PACKAGES="acl attr audit audit-libs avahi-autoipd basesystem bash bind-libs bind-libs-lite bind-license bind-utils bzip2 bzip2-libs ca-certificates checkpolicy chkconfig coreutils cpio cracklib cracklib-dicts crda cronie cronie-anacron crontabs cryptsetup-libs curl cyrus-sasl-lib db4 dbus dbus-glib dbus-libs device-mapper device-mapper-libs dhclient dhcp-common dhcp-libs diffutils dnsmasq dosfstools dracut e2fsprogs e2fsprogs-libs elfutils-libelf ethtool expat fedora-release fedora-release-notes file file-libs filesystem findutils fipscheck fipscheck-lib gamin gawk gdbm glib2 glibc glibc-common gmp gnupg2 gpgme grep groff groff-base gzip hardlink hostname hwdata info initscripts iproute iptables iputils iw kbd kbd-misc keyutils keyutils-libs kmod kmod-libs krb5-libs less libacl libassuan libattr libblkid libcap libcap-ng libcom_err libcurl libdaemon libdb libdb-utils libedit libevent libffi libgcc libgcrypt libgpg-error libgssglue libgudev1 libidn libmount libnfsidmap libnl libnl3 libpcap libpipeline libpwquality libselinux libselinux-utils libsemanage libsepol libss libssh2 libsss_sudo libstdc++ libtirpc libudev libusb1 libuser libutempter libuuid libxml2 linux-atm-libs logrotate lua m4 man-db man-pages mingetty mobile-broadband-provider-info ncurses ncurses-base ncurses-libs net-tools newt newt-python nfs-utils nspr nss nss-myhostname nss-softokn nss-softokn-freebl nss-sysinit nss-tools nss-util ntpdate openldap openssh-clients openssl pam parted passwd pciutils-libs pcre pinentry pkgconfig policycoreutils popt ppp procps psmisc pth pygpgme python python-chardet python-iniparse python-kitchen python-libs python-pycurl python-urlgrabber readline rootfiles rootfs-resize rpcbind rpm rpm-build-libs rpm-libs rpm-python rsyslog sed selinux-policy selinux-policy-targeted setserial setup shadow-utils shared-mime-info slang sqlite sudo systemd systemd-sysv sysvinit-tools tar tcp_wrappers-libs tzdata udev usbutils ustr util-linux vim-minimal wget which wireless-tools wpa_supplicant xz xz-libs yum yum-metadata-parser yum-utils zlib"
		;;
		18)
			BASIC_PACKAGES="acl attr audit audit-libs avahi-autoipd avahi-libs basesystem bash bind-libs bind-libs-lite bind-license bind-utils bzip2 bzip2-libs c-ares ca-certificates checkpolicy chkconfig coreutils cpio cracklib cracklib-dicts crda cronie cronie-anacron crontabs cryptsetup-libs cups-libs curl cyrus-sasl-gssapi cyrus-sasl-lib dbus dbus-glib dbus-libs device-mapper device-mapper-libs dhclient dhcp-common dhcp-libs diffutils dnsmasq dosfstools dracut e2fsprogs e2fsprogs-libs elfutils-libelf ethtool expat fedora-release fedora-release-notes file file-libs filesystem findutils fipscheck fipscheck-lib gamin gawk gdbm glib2 glibc glibc-common gmp gnupg2 gnutls gpgme grep groff groff-base gzip hardlink hostname hwdata info initscripts iproute iptables iputils iw jbigkit-libs json-c kbd kbd-misc keyutils keyutils-libs kmod kmod-libs kpartx krb5-libs less libacl libassuan libattr libbasicobjects libblkid libbsd libcap libcap-ng libcollection libcom_err libcurl libdaemon libdb libdb-utils libdb4 libdhash libedit libee libestr libevent libffi libgcc libgcrypt libgpg-error libgssglue libgudev1 libidn libini_config libipa_hbac libjpeg-turbo libldb liblognorm libmicrohttpd libmount libnfsidmap libnl libnl3 libpath_utils libpcap libpipeline libpng libpwquality libref_array libselinux libselinux-utils libsemanage libsepol libss libssh2 libsss_idmap libsss_sudo libstdc++ libtalloc libtasn1 libtdb libtevent libtiff libtirpc libusbx libuser libutempter libuuid libwbclient libxml2 linux-atm-libs logrotate lua m4 man-db man-pages mingetty mobile-broadband-provider-info ncurses ncurses-base ncurses-libs net-tools newt newt-python nfs-utils nspr nss nss-myhostname nss-softokn nss-softokn-freebl nss-sysinit nss-tools nss-util ntpdate openldap openssh-clients openssl-libs p11-kit pam parted passwd pciutils-libs pcre pinentry pkgconfig policycoreutils popt procps-ng psmisc pth pygpgme pyliblzma pyparted pytalloc python python-chardet python-iniparse python-kitchen python-libs python-psutil python-pycurl python-urlgrabber qrencode-libs quota quota-nls readline rootfiles rootfs-resize rpcbind rpm rpm-build-libs rpm-libs rpm-python rsyslog samba-libs sed selinux-policy selinux-policy-targeted setserial setup shadow-utils shared-mime-info slang sqlite sssd sssd-client sudo systemd systemd-libs systemd-sysv sysvinit-tools tar tcp_wrappers tcp_wrappers-libs tzdata usbutils ustr util-linux vim-minimal wget which wireless-tools wpa_supplicant xz xz-libs yum yum-metadata-parser yum-utils zlib"
		;;
		19)
			BASIC_PACKAGES="acl attr audit audit-libs avahi-autoipd avahi-libs basesystem bash bind-libs bind-libs-lite bind-license bind-utils bzip2 bzip2-libs c-ares ca-certificates checkpolicy chkconfig coreutils cpio cracklib cracklib-dicts crda cronie cronie-anacron crontabs cryptsetup-libs cups-libs curl cyrus-sasl-gssapi cyrus-sasl-lib dbus dbus-glib dbus-libs device-mapper device-mapper-libs dhclient dhcp-common dhcp-libs diffutils dnsmasq dosfstools dracut e2fsprogs e2fsprogs-libs elfutils-libelf ethtool expat fedora-release fedora-release-notes file file-libs filesystem findutils fipscheck fipscheck-lib gamin gawk gdbm glib2 glibc glibc-common gmp gnupg2 gnutls gpgme grep groff groff-base gzip hardlink hostname hwdata info initscripts iproute iptables iputils iw jbigkit-libs json-c kbd kbd-misc keyutils keyutils-libs kmod kmod-libs kpartx krb5-libs less libacl libassuan libattr libbasicobjects libblkid libbsd libcap libcap-ng libcollection libcom_err libcurl libdaemon libdb libdb-utils libdb4 libdhash libedit libee libestr libevent libffi libgcc libgcrypt libgpg-error libgssglue libgudev1 libidn libini_config libipa_hbac libjpeg-turbo libldb liblognorm libmicrohttpd libmount libnfsidmap libnl libnl3 libpath_utils libpcap libpipeline libpng libpwquality libref_array libselinux libselinux-utils libsemanage libsepol libss libssh2 libsss_idmap libstdc++ libtalloc libtasn1 libtdb libtevent libtiff libtirpc libusbx libuser libutempter libuuid libwbclient libxml2 linux-atm-libs logrotate lua m4 man-db man-pages mingetty mobile-broadband-provider-info ncurses ncurses-base ncurses-libs net-tools nettle newt newt-python nfs-utils nspr nss nss-myhostname nss-softokn nss-softokn-freebl nss-sysinit nss-tools nss-util ntpdate openldap openssh-clients openssl-libs p11-kit pam parted passwd pciutils-libs pcre pinentry pkgconfig policycoreutils popt procps-ng psmisc pth pygpgme pyliblzma pyparted pytalloc python python-chardet python-iniparse python-kitchen python-libs python-psutil python-pycurl python-urlgrabber qrencode-libs quota quota-nls readline rootfiles rootfs-resize rpcbind rpm rpm-build-libs rpm-libs rpm-python rsyslog samba-libs sed selinux-policy selinux-policy-targeted setserial setup shadow-utils shared-mime-info slang sqlite sssd sssd-client sudo systemd systemd-libs systemd-sysv sysvinit-tools tar tcp_wrappers tcp_wrappers-libs tzdata usbutils ustr util-linux vim-minimal wget which wireless-tools wpa_supplicant xz xz-libs yum yum-metadata-parser yum-utils zlib"
		;;
		20)
			BASIC_PACKAGES="acl attr audit audit-libs avahi-autoipd avahi-libs basesystem bash bind-libs bind-libs-lite bind-license bind-utils bzip2 bzip2-libs c-ares ca-certificates checkpolicy chkconfig coreutils cpio cracklib cracklib-dicts crda cronie cronie-anacron crontabs cryptsetup-libs cups-libs curl cyrus-sasl-gssapi cyrus-sasl-lib dbus dbus-glib dbus-libs device-mapper device-mapper-libs dhclient dhcp-common dhcp-libs diffutils dnsmasq dosfstools dracut e2fsprogs e2fsprogs-libs elfutils-libelf ethtool expat fedora-release fedora-release-notes file file-libs filesystem findutils fipscheck fipscheck-lib gamin gawk gdbm glib2 glibc glibc-common gmp gnupg2 gnutls gpgme grep groff groff-base gzip hardlink hostname hwdata info initscripts iproute iptables iputils iw jbigkit-libs json-c kbd kbd-misc keyutils keyutils-libs kmod kmod-libs kpartx krb5-libs less libacl libassuan libattr libbasicobjects libblkid libbsd libcap libcap-ng libcollection libcom_err libcurl libdaemon libdb libdb-utils libdb4 libdhash libedit libee libestr libevent libffi libgcc libgcrypt libgpg-error libgssglue libgudev1 libidn libini_config libipa_hbac libjpeg-turbo libldb liblognorm libmicrohttpd libmount libnfsidmap libnl libnl3 libpath_utils libpcap libpipeline libpng libpwquality libref_array libselinux libselinux-utils libsemanage libsepol libss libssh2 libsss_idmap libstdc++ libtalloc libtasn1 libtdb libtevent libtiff libtirpc libusbx libuser libutempter libuuid libwbclient libxml2 linux-atm-libs logrotate lua m4 man-db man-pages mingetty mobile-broadband-provider-info ncurses ncurses-base ncurses-libs net-tools nettle newt newt-python nfs-utils nspr nss nss-myhostname nss-softokn nss-softokn-freebl nss-sysinit nss-tools nss-util ntpdate openldap openssh-clients openssl-libs p11-kit pam parted passwd pciutils-libs pcre pinentry pkgconfig policycoreutils popt procps-ng psmisc pth pygpgme pyliblzma pyparted pytalloc python python-chardet python-iniparse python-kitchen python-libs python-psutil python-pycurl python-urlgrabber qrencode-libs quota quota-nls readline rootfiles rootfs-resize rpcbind rpm rpm-build-libs rpm-libs rpm-python rsyslog samba-libs sed selinux-policy selinux-policy-targeted setserial setup shadow-utils shared-mime-info slang sqlite sssd sssd-client sudo systemd systemd-libs systemd-sysv sysvinit-tools tar tcp_wrappers tcp_wrappers-libs tzdata usbutils ustr util-linux vim-minimal wget which wireless-tools wpa_supplicant xz xz-libs yum yum-metadata-parser yum-utils zlib"
		;;
		esac
		REPO="${MIRROR%/}/${SUITE}/Everything/${ARCH}/os"
		PKG_LIST="$MNT_TARGET/tmp/packages.list"

		msg -n "Preparing for deployment ... "
		(set -e
			cd $MNT_TARGET
			mkdir etc
			echo "root:x:0:0:root:/root:/bin/bash" > etc/passwd
			echo "root:x:0:" > etc/group
			touch etc/fstab
			mkdir -p usr/bin usr/sbin usr/lib
			ln -sf usr/bin; ln -sf usr/sbin; ln -sf usr/lib
			mkdir tmp; chmod 01777 tmp
		exit 0)
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }

		msg -n "Retrieving packages list ... "
		(set -e
			REPODATA_FILE=`wget -q -O - $REPO/repodata | sed -n '/<a / s/^.*<a [^>]*href="\([^\"]*\-primary\.xml\.gz\)".*$/\1/p'`
			wget -q -O - $REPO/repodata/$REPODATA_FILE | gzip -dc | sed -n '/<location / s/^.*<location [^>]*href="\([^\"]*\)".*$/\1/p' > $PKG_LIST
		exit 0)
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }

		msg "Retrieving base packages: "
		for PACKAGE in $BASIC_PACKAGES; do
			msg -n "$PACKAGE ... "
			PKG_URL=`grep -m1 -e "^.*/$PACKAGE-[0-9][0-9\.\-].*\.rpm$" $PKG_LIST`
			#test "$PKG_URL" || { msg "fail"; return 1; }
			FILE=`basename $PKG_URL`
			#echo "downloading ${FILE}... "
			for i in 1 2 3
			do
				wget -q -c -O $MNT_TARGET/tmp/$FILE $REPO/$PKG_URL
				[ $? -eq 0 ] && break || sleep 30s
			done
			#echo "unpacking ${FILE}... "
			(cd $MNT_TARGET; rpm2cpio $MNT_TARGET/tmp/$FILE | cpio -idmu)
			[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }
		done

		msg "Mounting partitions: "
		mount_system proc sys selinux dev pts shm

		msg "Installing base packages: "
		chroot $MNT_TARGET /bin/rpm -iv --force --nosignature --nodeps /tmp/*.rpm 1>&3 2>&3
		msg -n "Updating packages database ... "
		chroot $MNT_TARGET /bin/rpm -i --force --nosignature --nodeps --justdb /tmp/*.rpm
		[ $? -eq 0 ] && msg "done" || msg "fail"
		# to fix cap_set_file failed
		#chroot $MNT_TARGET /bin/rpm -i --nosignature --justdb /tmp/glibc-common-*.rpm /tmp/iputils-*.rpm /tmp/systemd-*.rpm
		# to fix chown32(/dev/pts/*) operation not permitted
		chmod 04755 $MNT_TARGET/usr/libexec/pt_chown
		chmod 04755 $MNT_TARGET/usr/bin/ping
		chmod 04755 $MNT_TARGET/usr/bin/systemd-detect-virt
		# clean cache
		rm -rf $MNT_TARGET/tmp/*
	;;
	opensuse)
		msg "Installing openSUSE distribution: "

		BASIC_PACKAGES="aaa_base aaa_base-extras autoyast2-installation bash bind-libs bind-utils branding-openSUSE bridge-utils bzip2 coreutils cpio cracklib cracklib-dict-full cron cronie cryptsetup curl cyrus-sasl dbus-1 dbus-1-x11 device-mapper dhcpcd diffutils dirmngr dmraid e2fsprogs elfutils file filesystem fillup findutils fontconfig gawk gio-branding-openSUSE glib2-tools glibc glibc-extra glibc-i18ndata glibc-locale gnu-unifont-bitmap-fonts gpg2 grep groff gzip hwinfo ifplugd info initviocons iproute2 iputils kbd kpartx krb5 less libX11-6 libX11-data libXau6 libXext6 libXft2 libXrender1 libacl1 libadns1 libaio1 libasm1 libassuan0 libattr1 libaudit1 libaugeas0 libblkid1 libbz2-1 libcairo2 libcap-ng0 libcap2 libcom_err2 libcrack2 libcryptsetup4 libcurl4 libdaemon0 libdb-4_8 libdbus-1-3 libdrm2 libdw1 libedit0 libelf0 libelf1 libestr0 libexpat1 libext2fs2 libffi4 libfreetype6 libgcc_s1 libgcrypt20 libgdbm4 libgio-2_0-0 libglib-2_0-0 libgmodule-2_0-0 libgmp10 libgnutls28 libgobject-2_0-0 libgpg-error0 libgssglue1 libharfbuzz0 libhogweed2 libicu52_1 libidn11 libiw30 libjson-c2 libkeyutils1 libkmod2 libksba8 libldap-2_4-2 liblua5_1 liblua5_2 liblzma5 libmagic1 libmicrohttpd10 libmodman1 libmount1 libncurses5 libncurses6 libnettle4 libnl1 libopenssl1_0_0 libp11-kit0 libpango-1_0-0 libparted0 libpci3 libpcre1 libpipeline1 libpixman-1-0 libply-boot-client2 libply-splash-core2 libply-splash-graphics2 libply2 libpng16-16 libpolkit0 libpopt0 libprocps1 libproxy1 libpth20 libpython2_7-1_0 libqrencode3 libreadline6 libreiserfs-0_3-0 libsasl2-3 libselinux1 libsemanage1 libsepol1 libsolv-tools libssh2-1 libstdc++6 libstorage5 libtasn1 libtasn1-6 libtirpc1 libudev1 libusb-0_1-4 libusb-1_0-0 libustr-1_0-1 libuuid1 libwrap0 libxcb-render0 libxcb-shm0 libxcb1 libxml2-2 libxtables10 libyui-ncurses-pkg6 libyui-ncurses6 libyui6 libz1 libzio1 libzypp logrotate lsscsi lvm2 man man-pages mdadm mkinitrd multipath-tools ncurses-utils net-tools netcfg openSUSE-build-key openSUSE-release-Factory openSUSE-release-ftp-Factory openslp openssl pam pam-config pango-tools parted pciutils pciutils-ids perl perl-Bootloader perl-Config-Crontab perl-XML-Parser perl-XML-Simple perl-base perl-gettext permissions pinentry pkg-config plymouth plymouth-branding-openSUSE plymouth-plugin-label plymouth-plugin-script plymouth-scripts polkit procps python-base rpcbind rpm rsyslog sed shadow shared-mime-info sudo suse-module-tools sysconfig sysfsutils syslog-service systemd systemd-presets-branding-openSUSE systemd-sysvinit sysvinit-tools tar tcpd terminfo-base timezone tunctl u-boot-tools udev unzip update-alternatives util-linux vim vlan wallpaper-branding-openSUSE wireless-tools wpa_supplicant xz yast2 yast2-bootloader yast2-core yast2-country yast2-country-data yast2-firstboot yast2-hardware-detection yast2-installation yast2-packager yast2-perl-bindings yast2-pkg-bindings yast2-proxy yast2-slp yast2-storage yast2-trans-stats yast2-transfer yast2-update yast2-xml yast2-ycp-ui-bindings zypper"
		REPO="${MIRROR%/}/${ARCH}/${SUITE}/repo/oss/suse"
		PKG_LIST="$MNT_TARGET/tmp/packages.list"

		msg -n "Preparing for deployment ... "
		(set -e
			cd $MNT_TARGET
			mkdir etc
			echo "root:x:0:0:root:/root:/bin/bash" > etc/passwd
			echo "root:x:0:" > etc/group
			touch etc/fstab
			mkdir tmp; chmod 01777 tmp
		exit 0)
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }

		msg -n "Retrieving packages list ... "
		(set -e
			REPODATA_FILE=`wget -q -O - $REPO/repodata | sed -n '/<a / s/^.*<a [^>]*href="\([^\"]*\-primary\.xml\.gz\)".*$/\1/p'`
			wget -q -O - $REPO/repodata/$REPODATA_FILE | gzip -dc | sed -n '/<location / s/^.*<location [^>]*href="\([^\"]*\)".*$/\1/p' > $PKG_LIST
		exit 0)
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }

		msg "Retrieving base packages: "
		for PACKAGE in $BASIC_PACKAGES; do
			msg -n "$PACKAGE ... "
    			PKG_URL=`grep -e "^arm" -e "^noarch" | grep -m1 -e "^.*/$PACKAGE-[0-9s][0-9\.].*\.rpm$" $PKG_LIST`
    			test "$PKG_URL" || { msg "fail"; return 1; }
    			FILE=`basename $PKG_URL`
    			#echo "downloading ${FILE}... "
    			for i in 1 2 3
    			do
    				wget -q -c -O $MNT_TARGET/tmp/$FILE $REPO/$PKG_URL
    				[ $? -eq 0 ] && break || sleep 30s
    			done
    			#echo "unpacking ${FILE}... "
    			(cd $MNT_TARGET; rpm2cpio $MNT_TARGET/tmp/$FILE | cpio -idmu)
    			[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }
		done

		msg "Mounting partitions: "
		mount_system proc sys selinux dev pts shm

		msg "Installing base packages: "
		chroot $MNT_TARGET /bin/rpm -iv --force --nosignature --nodeps /tmp/*.rpm 1>&3 2>&3
		# clean cache
		rm -rf $MNT_TARGET/tmp/*
	;;
	gentoo)
		msg "Installing Gentoo distribution: "

		msg -n "Preparing for deployment ... "
		(set -e
			cd $MNT_TARGET
			mkdir tmp; chmod 01777 tmp
		exit 0)
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }

		msg -n "Getting repository path ... "
		REPO="${MIRROR%/}/arm/autobuilds"
		STAGE3="$MNT_TARGET/tmp/latest-stage3.tar.bz2"
		ARCHIVE=`wget -q -O - "${REPO}/latest-stage3-${ARCH}.txt" | grep -v ^#`
		[ -n "$ARCHIVE" ]&& msg "done" || { msg "fail"; return 1; }

		msg -n "Retrieving stage3 archive ... "
		for i in 1 2 3
		do
			wget -c -O $STAGE3 $REPO/$ARCHIVE
			[ $? -eq 0 ] && { OK=1; break; } || sleep 30s
		done
		[ "$OK" == "1" ] && msg "done" || { msg "fail"; return 1; }

		msg -n "Unpacking stage3 archive ... "
		(set -e
			bzip2 --decompress --stdout --force $STAGE3 | tar x -C $MNT_TARGET
			rm $STAGE3
		exit 0)
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }

		msg "Mounting partitions: "
		mount_system proc sys selinux dev pts shm

		msg "Preconfigure system: "
		configure_system dns mtab groups repository
		
		msg -n "Updating portage tree ... "
		(set -e
			chroot $MNT_TARGET emerge --sync
			chroot $MNT_TARGET eselect profile set 1
		exit 0) 1>/dev/null
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }

		msg "Updating world: "
		(set -e
			chroot $MNT_TARGET emerge --update --deep --newuse sudo
		exit 0) 1>&3 2>&3
		[ $? -eq 0 ] || return 1

		msg -n "Updating configuration ... "
		find $MNT_TARGET/ -name "._cfg0000_*" | while read f; do mv "$f" "$(echo $f | sed 's/._cfg0000_//g')"; done
		[ $? -eq 0 ] && msg "done" || msg "skip"
	;;
	rootfs)
		msg "Getting and unpacking rootfs archive: "
		if [ -n "`echo $MIRROR | grep -i 'gz$'`" ]; then
			if [ -e "$MIRROR" ]; then
				(set -e
					tar xzpvf "$MIRROR" -C $MNT_TARGET
				exit 0) 1>&3 2>&3
				[ $? -eq 0 ] || return 1
			fi
			if [ -n "`echo $MIRROR | grep -i '^http'`" ]; then
				(set -e
					wget -q -O - "$MIRROR" | tar xzpv -C $MNT_TARGET
				exit 0) 1>&3 2>&3
				[ $? -eq 0 ] || return 1 
			fi
		fi
		if [ -n "`echo $MIRROR | grep -i 'bz2$'`" ]; then
			if [ -e "$MIRROR" ]; then
				(set -e
					bzip2 --decompress --stdout --force "$MIRROR" | tar xpv -C $MNT_TARGET
				exit 0) 1>&3 2>&3
				[ $? -eq 0 ] || return 1
			fi
			if [ -n "`echo $MIRROR | grep -i '^http'`" ]; then
				(set -e
					wget -q -O - "$MIRROR" | bzip2 --decompress --stdout --force | tar xpv -C $MNT_TARGET
				exit 0) 1>&3 2>&3
				[ $? -eq 0 ] || return 1 
			fi
		fi
		[ "`ls $MNT_TARGET | wc -l`" -le 1 ] && { msg " ...installation failed."; return 1; }
	;;
	*)
		msg "This Linux distribution not supported."
		return 1
	;;
	esac

	configure_system
	[ $? -ne 0 ] && return 1

	return 0
}

uninstall_system()
{
	umount_system
	[ $? -ne 0 ] && return 1

	#msg -n "Removing disk image ... "
	#(set -e
	#	[ -f "$IMG_TARGET" ] && rm $IMG_TARGET
	#	[ -d "$MNT_TARGET" ] && rmdir $MNT_TARGET
	#exit 0)
	#[ $? -eq 0 ] && msg "done" || msg "fail"

	msg -n "Removing symlink ... "
	(set -e
		if [ -e "/system/bin/linuxdeploy" ]; then
			rm -f /system/bin/linuxdeploy || 
				{ mount -o rw,remount /system;	rm -f /system/bin/linuxdeploy; mount -o ro,remount /system;	}
		fi
	exit 0)
	[ $? -eq 0 ] && msg "done" || msg "fail"

	msg -n "Removing environment ... "
	(set -e
		rm -rf ${ENV_DIR%/}/mnt ${ENV_DIR%/}/deploy ${ENV_DIR%/}/etc ${ENV_DIR%/}/bin
		[ -d "$ENV_DIR" ] && rmdir $ENV_DIR
	exit 0)
	[ $? -eq 0 ] && msg "done" || msg "fail"

	return 0
}

status_system()
{
	msg "Linux Deploy version: $(cat $ENV_DIR/etc/version)"
	msg "Android version: $(getprop ro.build.version.release)"
	msg "Device: $(getprop ro.product.brand) $(getprop ro.product.device)"
	msg "CPU: $(cat /proc/cpuinfo | grep ^Processor | awk -F': ' '{print $2}')"
	msg "$(cat /proc/meminfo | grep ^MemTotal)"
	msg "$(cat /proc/meminfo | grep ^SwapTotal)"
	msg -n "SELinux: "
	[ -e "/sys/fs/selinux/enforce" ] && msg "yes" || msg "no"
	msg -n "Support loop device: "
	[ -e "/dev/block/loop0" ] && msg "yes" || msg "no"
	msg "Supported file systems: $(cat /proc/filesystems | grep -v nodev | sort | xargs)"
	LINUX_VERSION=`[ -r "$MNT_TARGET/etc/os-release" ] && . "$MNT_TARGET/etc/os-release"; [ -n "$PRETTY_NAME" ] && echo "$PRETTY_NAME" || echo "unknown"`
	msg "Active system: $LINUX_VERSION"
	msg "Running services: "
	msg -n "* SSH: "
	[ -n "`ps | grep -E '/s?bin/sshd' | grep -v grep`" ] && msg "yes" || msg "no"
	msg -n "* VNC: "
	[ -n "`ps | grep 'X*vnc' | grep -v grep`" ] && msg "yes" || msg "no"
	msg "Mounted parts on Linux: "
	for i in `cat /proc/mounts | grep $MNT_TARGET | awk '{print $2}' | sed "s|$MNT_TARGET/*|/|g"`
	do
		msg "* $i"
		is_mounted=1
	done
	[ -z "$is_mounted" ] && msg " ...not mounted anything"
	msg "Available mount points: "
	for p in `cat /proc/mounts | grep ^/dev/ | grep -v $MNT_TARGET | grep -v ' /mnt/asec/' | grep -v ' /mnt/secure/' | awk '{print $2":"$3}'`
	do
		PART=`echo $p | awk -F: '{print $1}'`
		FSTYPE=`echo $p | awk -F: '{print $2}'`
		BLOCK_SIZE=`stat -c '%s' -f $PART`
		AVAILABLE=`stat -c '%a' -f $PART | awk '{printf("%.1f",$1*'$BLOCK_SIZE'/1024/1024/1024)}'`
		TOTAL=`stat -c '%b' -f $PART | awk '{printf("%.1f",$1*'$BLOCK_SIZE'/1024/1024/1024)}'`
		if [ -n "$AVAILABLE" -a -n "$TOTAL" ]; then
			msg "* $PART: $AVAILABLE/$TOTAL GB ($FSTYPE)"
		fi
	done
	msg "Available partitions: "
	for i in /sys/block/*/dev
	do
		if [ -f $i ]; then
			DEVNAME=$(echo $i | sed -e 's@/dev@@' -e 's@.*/@@')
			[ -e "/dev/$DEVNAME" ] && DEVPATH=/dev/$DEVNAME
			[ -e "/dev/block/$DEVNAME" ] && DEVPATH=/dev/block/$DEVNAME
			[ -n "$DEVPATH" ] && PARTS=`fdisk -l $DEVPATH | grep ^/dev/ | awk '{print $1}'`
			for PART in $PARTS
			do
				SIZE=`fdisk -l $PART | grep 'Disk.*bytes' | awk '{ sub(/,/,""); print $3" "$4}'`
				BOOT=`fdisk -l $DEVPATH | grep ^$PART | awk '{print $2}'`
				if [ "$BOOT" = "*" ]; then
					TYPE=`fdisk -l $DEVPATH | grep ^$PART | awk '{str=$7; for (i=8;i<=11;i++) if ($i!="") str=str" "$i; printf("%s",str)}'`
				else
					TYPE=`fdisk -l $DEVPATH | grep ^$PART | awk '{str=$6; for (i=7;i<=10;i++) if ($i!="") str=str" "$i; printf("%s",str)}'`
				fi
				msg "* $PART: $SIZE ($TYPE)"
				is_partitions=1
			done
		fi
	done
	[ -z "$is_partitions" ] && msg " ...no available partitions"
}

#################################################

case "$1" in
mount)
	msg ">>> begin: $1"
	mount_system
	msg "<<< end: $1"
;;
prepare)
	msg ">>> begin: $1"
	prepare_system
	msg "<<< end: $1"
;;
install)
	msg ">>> begin: $1"
	install_system
	msg "<<< end: $1"
;;
configure)
	msg ">>> begin: $1"
	mount_system
	[ $? -eq 0 ] && configure_system
	msg "<<< end: $1"
;;
start)
	msg ">>> begin: $1"
	start_system
	msg "<<< end: $1"
;;
stop)
	msg ">>> begin: $1"
	stop_system
	msg "<<< end: $1"
;;
umount)
	msg ">>> begin: $1"
	umount_system
	msg "<<< end: $1"
;;
uninstall)
	msg ">>> begin: $1"
	uninstall_system
	msg "<<< end: $1"
;;
shell)
	msg ">>> begin: $1"
	chroot_system "$2"
	msg "<<< end: $1"
;;
status)
	msg ">>> begin: $1"
	status_system
	msg "<<< end: $1"
;;
*)
	msg "Usage: $0 <mount|prepare|install|configure|start|stop|umount|uninstall|shell|status>"
;;
esac
