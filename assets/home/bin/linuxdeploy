#!/system/bin/sh
#
# Linux Deploy for Android
# (C) 2012 Anton Skshidlevsky <meefik@gmail.com>
#

ENV_DIR="."

if [ -r "${ENV_DIR%/}/etc/deploy.conf" ]; then
	. ${ENV_DIR%/}/etc/deploy.conf
else
	echo "Configuration file not found!"
	exit 1
fi

PATH=${ENV_DIR%/}/bin:$PATH:/usr/bin:/bin:/usr/sbin:/sbin
TERM=vt100
export PATH TERM

exec 3>&1
[ "$DEBUG_MODE" != "y" ] && { exec 1>/dev/null; exec 2>/dev/null; }
[ "$TRACE_MODE" == "y" ] && set -x

cd $ENV_DIR
umask 0022

#################################################

msg()
{
	ECHO_OPT=""
	ECHO_STR=""
	
	for i in "$@"
	do
		case $i in
		-n)
			ECHO_OPT="-n"
		;;
		*)
			ECHO_STR="$i"
		;;
		esac
	done
	
	echo $ECHO_OPT "$ECHO_STR" 1>&3
	
	return 0
}

prepare_system()
{
	msg -n "Checking mount points ... "
	is_mnt=`cat /proc/mounts | grep " $MNT_TARGET "`
	if [ -n "$is_mnt" ]; then
		msg "fail"; return 1
	else
		msg "done"
	fi

	msg -n "Checking destination path ... "
	if [ "$DEPLOY_TYPE" == "image" ]; then
		if [ -e "$IMG_TARGET" -a ! -f "$IMG_TARGET" ]; then
			msg "fail"; return 1
		fi
	fi
	if [ "$DEPLOY_TYPE" == "partition" ]; then
		if [ ! -b "$IMG_TARGET" ]; then
			msg "fail"; return 1
		fi
	fi
	if [ "$DEPLOY_TYPE" == "directory" ]; then
		if [ ! -d "$IMG_TARGET" ]; then
			msg "fail"; return 1
		fi
	fi
	msg "done"
	
	if [ "$DEPLOY_TYPE" == "image" ]; then
	    if [ "$IMG_SIZE" -eq 0 ]; then
	    	[ -f "$IMG_TARGET" ] && FILE_SIZE=`stat -c %s $IMG_TARGET` || FILE_SIZE=0
	    	DIR_NAME=`dirname $IMG_TARGET`
	    	BLOCK_SIZE=`stat -c %s -f $DIR_NAME`
			AVAILABLE_SIZE=`stat -c %a -f $DIR_NAME`
			let AVAILABLE_SIZE="($BLOCK_SIZE*$AVAILABLE_SIZE)+$FILE_SIZE"
			let IMG_SIZE="($AVAILABLE_SIZE-$AVAILABLE_SIZE/10)/1048576"
			[ "$IMG_SIZE" -gt 4095 ] && IMG_SIZE=4095
		fi
		msg -n "Making new disk image ($IMG_SIZE MB) ... "
		(set -e
			if [ "$IMG_SIZE" -ge 2048 ]; then
				DD_SEEK=2047
				let DD_COUNT=$IMG_SIZE-2047
			else
				DD_SEEK=$IMG_SIZE
				DD_COUNT=0
			fi
			dd if=/dev/zero of=$IMG_TARGET bs=1048576 seek=$DD_SEEK count=$DD_COUNT
		exit 0)
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }
	fi

	if [ "$DEPLOY_TYPE" == "image" -o "$DEPLOY_TYPE" == "partition" ]; then
		if [ "$FS_TYPE" == "auto" ]; then
			for fs in ext4 ext3 ext2
			do
				fs_support=`cat /proc/filesystems | grep $fs`
				if [ -n "$fs_support" ]; then
					FS_TYPE=$fs
					break
				fi
			done
		fi
		msg -n "Making file system ($FS_TYPE) ... "
		(set -e
			[ "$FS_TYPE" == "auto" ] && exit 1
			is_loop=`losetup | grep $IMG_TARGET || true`
			is_raw=`cat /proc/mounts | grep $IMG_TARGET || true`
			[ -z "$is_loop" -a -z "$is_raw" ] && mke2fs -qF -t $FS_TYPE -O ^has_journal $IMG_TARGET
		exit 0)
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }
	fi
	
	return 0
}

configure_system()
{
	if [ "$#" -eq 0 ]; then
		msg "Configuring GNU/Linux system: "
		configure_system dns mtab motd hosts hostname timezone sudo locales repository users profile upstart dbus gui
		return 0
	fi
	if [ "$#" -gt 1 ]; then
		for i in $*
		do
			configure_system $i
		done
		return 0
	fi

	msg -n "$1 ... "
	(set -e	
		case "$1" in
		dns)
			echo -n > $MNT_TARGET/etc/resolv.conf
			if [ -z "$SERVER_DNS" ]; then
				dns1=`getprop net.dns1`
				dns2=`getprop net.dns2`
				DNS_LIST="$dns1 $dns2"
				[ -z "$dns1" -a -z "$dns2" ] && DNS_LIST="8.8.8.8"
			else
				DNS_LIST=`echo $SERVER_DNS | tr ',;' ' '`
			fi
			for dns in $DNS_LIST
			do
				echo "nameserver $dns" >> $MNT_TARGET/etc/resolv.conf
			done
		;;
		mtab)
			#chroot $MNT_TARGET ln -sf /proc/mounts /etc/mtab
			rm -f $MNT_TARGET/etc/mtab || true
			cat /proc/mounts | grep $MNT_TARGET | sed "s|$MNT_TARGET/*|/|g" > $MNT_TARGET/etc/mtab
		;;
		motd)
			#LINUX_VERSION=`chroot $MNT_TARGET lsb_release -d | sed 's|Description:[[:space:]]*||' || true`
			LINUX_VERSION=`(. $MNT_TARGET/etc/os-release && echo $PRETTY_NAME) || true`
			[ -z "$LINUX_VERSION" ] && LINUX_VERSION="GNU/Linux ($DISTRIB)"
			MOTD="$LINUX_VERSION [running on Android via Linux Deploy]"
			rm -f $MNT_TARGET/etc/motd || true
			echo $MOTD > $MNT_TARGET/etc/motd
		;;
		hosts)
			is_localhost=`cat $MNT_TARGET/etc/hosts | grep "^127.0.0.1" || true`
			[ -z "$is_localhost" ] && echo '127.0.0.1 localhost' >> $MNT_TARGET/etc/hosts
		;;
		hostname)
			echo 'localhost' > $MNT_TARGET/etc/hostname
		;;
		timezone)
			TZ=`getprop persist.sys.timezone`
			[ -z "$TZ" ] && exit 1
			rm -f $MNT_TARGET/etc/localtime || true
			cp $MNT_TARGET/usr/share/zoneinfo/$TZ $MNT_TARGET/etc/localtime
			echo $TZ > $MNT_TARGET/etc/timezone
		;;
		sudo)
			SUDO_STR="$USER_NAME ALL=(ALL:ALL) NOPASSWD:ALL"
			is_str=`cat $MNT_TARGET/etc/sudoers | grep "$SUDO_STR" || true`
			[ -z "$is_str" ] && echo $SUDO_STR >> $MNT_TARGET/etc/sudoers
			chmod 440 $MNT_TARGET/etc/sudoers		
		;;
		locales)
			#echo "$LOCALE UTF-8" > $MNT_TARGET/etc/locale.gen
			#chmod 644 $MNT_TARGET/etc/locale.gen
			#chroot $MNT_TARGET locale-gen $LOCALE
			inputfile=`echo $LOCALE | awk -F. '{print $1}'`
			charmapfile=`echo $LOCALE | awk -F. '{print $2}'`
			chroot $MNT_TARGET localedef -i $inputfile -c -f $charmapfile $LOCALE
			case "$DISTRIB" in
			debian|ubuntu)
				echo "LANG=$LOCALE" > $MNT_TARGET/etc/default/locale
			;;
			archlinux)
				echo "LANG=$LOCALE" > $MNT_TARGET/etc/locale.conf
			;;
			fedora)
				echo "LANG=$LOCALE" > $MNT_TARGET/etc/sysconfig/i18n
			;;
			opensuse)
				echo "RC_LANG=$LOCALE" > $MNT_TARGET/etc/sysconfig/language
			;;
			esac		
		;;
		repository)
			case "$DISTRIB" in
			debian|ubuntu)
				if [ -e "$MNT_TARGET/etc/apt/sources.list" ]; then
					cp $MNT_TARGET/etc/apt/sources.list $MNT_TARGET/etc/apt/sources.list.bak
				else
					echo "# Generated by Linux Deploy" > $MNT_TARGET/etc/apt/sources.list
				fi
				if [ -z "`grep "$MIRROR.*$SUITE" $MNT_TARGET/etc/apt/sources.list`" ]; then
					case "$DISTRIB" in
					debian)
						echo "deb $MIRROR $SUITE main contrib non-free" >> $MNT_TARGET/etc/apt/sources.list
						echo "deb-src $MIRROR $SUITE main contrib non-free" >> $MNT_TARGET/etc/apt/sources.list
					;;
					ubuntu)
						echo "deb $MIRROR $SUITE main universe multiverse" >> $MNT_TARGET/etc/apt/sources.list
						echo "deb-src $MIRROR $SUITE main universe multiverse" >> $MNT_TARGET/etc/apt/sources.list
					;;
					esac
				fi
			;;
			archlinux)
				sed -i "s|^[[:space:]]*Architecture[[:space:]]*=.*$|Architecture = $ARCH|" $MNT_TARGET/etc/pacman.conf
				sed -i "s|^[[:space:]]*\(CheckSpace\)|#\1|" $MNT_TARGET/etc/pacman.conf
				sed -i "s|^[[:space:]]*SigLevel[[:space:]]*=.*$|SigLevel = Never|" $MNT_TARGET/etc/pacman.conf
				sed -i "s|^[[:space:]]*Server[[:space:]]*=.*|Server = $MIRROR/$ARCH/\$repo|" $MNT_TARGET/etc/pacman.d/mirrorlist
			;;
			opensuse)
				REPO_NAME="openSUSE-${SUITE}-${ARCH}-Repo-OSS"
				REPO_FILE="$MNT_TARGET/etc/zypp/repos.d/${REPO_NAME}.repo"
				echo "[${REPO_NAME}]" > $REPO_FILE 
				echo "name=${REPO_NAME}" >> $REPO_FILE
				echo "enabled=1" >> $REPO_FILE
				echo "autorefresh=0" >> $REPO_FILE
				echo "baseurl=${MIRROR%/}/${ARCH}/${SUITE}/repo/oss/" >> $REPO_FILE
				echo "type=NONE" >> $REPO_FILE
				chmod 644 $REPO_FILE
			;;
			esac
		;;
		users)
			AIDS=`cat ${ENV_DIR%/}/deploy/android-groups`
			for AID in $AIDS
			do
				XNAME=`echo $AID | awk -F: '{print $1}'`
				XID=`echo $AID | awk -F: '{print $2}'`
				sed -i "s|^$XNAME:.*|$XNAME:x:$XID:$USER_NAME|g" $MNT_TARGET/etc/group || true
				is_str=`cat $MNT_TARGET/etc/group | grep "^$XNAME:" || true`
				[ -z "$is_str" ] && echo "$XNAME:x:$XID:$USER_NAME" >> $MNT_TARGET/etc/group
				is_str=`cat $MNT_TARGET/etc/passwd | grep "^$XNAME:" || true`
				[ -z "$is_str" ] && echo "$XNAME:x:$XID:$XID::/:/bin/false" >> $MNT_TARGET/etc/passwd
				sed -i 's|^UID_MIN.*|UID_MIN 5000|g' $MNT_TARGET/etc/login.defs
				sed -i 's|^GID_MIN.*|GID_MIN 5000|g' $MNT_TARGET/etc/login.defs
			done
		;;
		profile)
			reserved=`echo $USER_NAME | grep ^aid_ || true`
			if [ -n "$reserved" ]; then
				echo "Username $USER_NAME is reserved!"
				return 1
			fi
			if [ "$USER_NAME" != "root" ]; then
				chroot $MNT_TARGET groupadd $USER_NAME || true
				chroot $MNT_TARGET useradd -m -g $USER_NAME -s /bin/bash $USER_NAME || true
				chroot $MNT_TARGET usermod -g $USER_NAME $USER_NAME || true
			fi
			chroot $MNT_TARGET sh -c "export $USER_NAME; printf '%s\n' changeme changeme | passwd $USER_NAME"
			USER_HOME=`cat $MNT_TARGET/etc/passwd | grep -m1 "^$USER_NAME:" | awk -F: '{print $6}'`
			USER_ID=`cat $MNT_TARGET/etc/passwd | grep -m1 "^$USER_NAME:" | awk -F: '{print $3}'`
			GROUP_ID=`cat $MNT_TARGET/etc/passwd | grep -m1 "^$USER_NAME:" | awk -F: '{print $4}'`
			PROFILE_STR='PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
			 is_str=`cat $MNT_TARGET$USER_HOME/.profile | grep "$PROFILE_STR" || true`
			[ -z "$is_str" ] && echo $PROFILE_STR >> $MNT_TARGET$USER_HOME/.profile
			chown -R $USER_ID:$GROUP_ID $MNT_TARGET$USER_HOME || true
		;;
		upstart)
			if [ -e "$MNT_TARGET/sbin/initctl" ]; then
				rm $MNT_TARGET/sbin/initctl
				chroot $MNT_TARGET ln -s /bin/true /sbin/initctl
			fi
		;;
		dbus)
			case "$DISTRIB" in
			debian|ubuntu)
				if [ -z "`grep '^aid_inet:.*,messagebus' $MNT_TARGET/etc/group`" ]; then
					sed -i "s|^\(aid_inet:.*\)|\1,messagebus|g" $MNT_TARGET/etc/group
				fi
			;;
			archlinux)
				if [ -z "`grep '^aid_inet:.*,dbus' $MNT_TARGET/etc/group`" ]; then
					sed -i "s|^\(aid_inet:.*\)|\1,dbus|g" $MNT_TARGET/etc/group
				fi
				mkdir $MNT_TARGET/run/dbus
				chmod 755 $MNT_TARGET/run/dbus
			;;
			fedora)
				if [ -z "`grep '^aid_inet:.*,dbus' $MNT_TARGET/etc/group`" ]; then
					sed -i "s|^\(aid_inet:.*\)|\1,dbus|g" $MNT_TARGET/etc/group
				fi
				mkdir $MNT_TARGET/var/run/dbus
				chmod 755 $MNT_TARGET/var/run/dbus
				chroot $MNT_TARGET sh -c "dbus-uuidgen > /etc/machine-id"
			;;
			esac
		;;
		gui)
			USER_HOME=`cat $MNT_TARGET/etc/passwd | grep -m1 "^$USER_NAME:" | awk -F: '{print $6}'`
			USER_ID=`cat $MNT_TARGET/etc/passwd | grep -m1 "^$USER_NAME:" | awk -F: '{print $3}'`
			GROUP_ID=`cat $MNT_TARGET/etc/passwd | grep -m1 "^$USER_NAME:" | awk -F: '{print $4}'`
			mkdir $MNT_TARGET$USER_HOME/.vnc || true
			echo "MPTcXfgXGiY=" | base64 -d > $MNT_TARGET$USER_HOME/.vnc/passwd
			chmod 600 $MNT_TARGET$USER_HOME/.vnc/passwd
			if [ "$DESKTOP_ENV" != "other" ]; then
				echo 'XAUTHORITY=$HOME/.Xauthority' > $MNT_TARGET$USER_HOME/.vnc/xstartup
				echo 'export XAUTHORITY' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				echo "LANG=$LOCALE" >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				echo "export LANG" >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				case "$DESKTOP_ENV" in
				xterm)
					echo 'xterm -max &' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				;;
				lxde)
					echo 'startlxde &' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				;;
				xfce)
					echo 'startxfce4 &' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				;;
				gnome)
					echo 'XKL_XMODMAP_DISABLE=1' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo 'export XKL_XMODMAP_DISABLE' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo 'if [ -n "`gnome-session -h | grep "\-\-session"`" ]; then' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo '   gnome-session --session=gnome &' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo 'else' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo '   gnome-session &' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo 'fi' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				;;
				kde)
					echo 'startkde &' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				;;
				esac
				chmod 755 $MNT_TARGET$USER_HOME/.vnc/xstartup
				echo "#!/bin/sh" > $MNT_TARGET$USER_HOME/.xsession
				cat $MNT_TARGET$USER_HOME/.vnc/xstartup >> $MNT_TARGET$USER_HOME/.xsession
				chmod 755 $MNT_TARGET$USER_HOME/.xsession
				chown $USER_ID:$GROUP_ID $MNT_TARGET$USER_HOME/.xsession
			fi
			chown -R $USER_ID:$GROUP_ID $MNT_TARGET$USER_HOME/.vnc
		;;
		esac
	exit 0)
	[ $? -eq 0 ] && msg "done" || msg "fail"
	
	if [ "$1" == "gui" -a "$INSTALL_GUI" == "y" ]; then
		msg "Installing GUI packages: "
		(set -e
			case "$DISTRIB" in
			debian|ubuntu)
				chroot $MNT_TARGET apt-get update -yq
				PKGS="tightvncserver x11-xserver-utils xfonts-base"
				case "$DESKTOP_ENV" in
				xterm)
					PKGS="$PKGS xterm"
				;;
				lxde)
					PKGS="$PKGS lxde menu-xdg hicolor-icon-theme gtk2-engines"
				;;
				xfce)
					PKGS="$PKGS xfce4 tango-icon-theme hicolor-icon-theme"
				;;
				gnome)
					PKGS="$PKGS gnome-core"
				;;
				kde)
					PKGS="$PKGS kde-standard"
				;;
				esac
				chroot $MNT_TARGET apt-get install $PKGS --no-install-recommends -yq
				chroot $MNT_TARGET apt-get clean
			;;
			archlinux)
				PKGS="tightvnc xorg-utils xorg-fonts-misc ttf-dejavu"
				case "$DESKTOP_ENV" in
				xterm)
					PKGS="$PKGS xterm"
				;;
				lxde)
					PKGS="$PKGS lxde gtk-engines"
				;;
				xfce)
					PKGS="$PKGS xfce4"
				;;
				gnome)
					PKGS="$PKGS gnome"
				;;
				kde)
					PKGS="$PKGS kdebase"
				;;
				esac
				#rm -f $MNT_TARGET/var/lib/pacman/db.lck || true
				chroot $MNT_TARGET pacman -Syq --noconfirm $PKGS
				rm -f $MNT_TARGET%/}/var/cache/pacman/pkg/* || true
			;;
			fedora)
				PKGS="tigervnc-server xorg-x11-server-utils xorg-x11-fonts-misc dejavu-*"
				case "$DESKTOP_ENV" in
				xterm)
					PKGS="$PKGS xterm"
				;;
				lxde)
					IGRP="LXDE"
				;;
				xfce)
					IGRP="XFCE"
				;;
				gnome)
					IGRP="GNOME Desktop Environment"
				;;
				kde)
					PKGS="$PKGS kde-baseapps kde-workspace ark konsole gwenview"
				;;
				esac
				chroot $MNT_TARGET yum install $PKGS --nogpgcheck --skip-broken -y
				[ -n "$IGRP" ] && chroot $MNT_TARGET yum groupinstall "$IGRP" --nogpgcheck --skip-broken -y
				chroot $MNT_TARGET yum clean all
			;;
			opensuse)
				PKGS="tightvnc xorg-x11-fonts-core dejavu-fonts xauth"
				case "$DESKTOP_ENV" in
				xterm)
					PKGS="$PKGS xterm"
				;;
				lxde)
					PKGS="$PKGS patterns-openSUSE-lxde"
				;;
				xfce)
					PKGS="$PKGS patterns-openSUSE-xfce"
				;;
				gnome)
					PKGS="$PKGS patterns-openSUSE-gnome"
				;;
				kde)
					PKGS="$PKGS patterns-openSUSE-kde"
				;;
				esac
				chroot $MNT_TARGET zypper --no-gpg-checks --non-interactive install $PKGS 
				chroot $MNT_TARGET zypper clean
			;;
			esac
		exit 0) 1>&3 2>&3
		[ $? -ne 0 ] && return 1
	fi
	
	return 0
}

update_system()
{
	msg "Updating configuration: "
	configure_system dns mtab
	[ $? -ne 0 ] && return 1
	
	return 0
}

mount_system()
{
	#msg -n "Checking file system ... "
	#if [ "$FS_TYPE" != "auto" ]; then
	#	(set -e
	#		fsck -t $FS_TYPE $IMG_TARGET
	#	exit 0)
	#	[ $? -eq 0 ] && msg "done" || msg "fail"
	#else
	#	msg "skip"
	#fi
	
	msg "Mounting partitions: "
	
	msg -n "/ ... "
	is_mnt=`cat /proc/mounts | grep " $MNT_TARGET "`
	if [ -z "$is_mnt" ]; then
		[ ! -d "$MNT_TARGET" ] && mkdir -p $MNT_TARGET
		[ -d "$IMG_TARGET" ] && MNT_OPTS="bind" || MNT_OPTS="rw,relatime"
		mount -o $MNT_OPTS $IMG_TARGET $MNT_TARGET
		if [ $? -eq 0 ]; then
			msg "done"
		else
			msg "fail"; return 1
		fi
	else
		msg "skip"
	fi
	
	msg -n "/proc ... "
	tg=$MNT_TARGET/proc; is_mnt=`cat /proc/mounts | grep " $tg "`
	if [ -z "$is_mnt" ]; then
		[ ! -d "$tg" ] && mkdir -p $tg
		mount -t proc proc $tg
		[ $? -eq 0 ] && msg "done" || msg "fail"
	else
		msg "skip"
	fi
	
	msg -n "/sys ... "
	tg=$MNT_TARGET/sys; is_mnt=`cat /proc/mounts | grep " $tg "`
	if [ -z "$is_mnt" ]; then
		[ ! -d "$tg" ] && mkdir -p $tg
		mount -t sysfs sys $tg
		[ $? -eq 0 ] && msg "done" || msg "fail"
	else
		msg "skip"
	fi
	
	msg -n "/dev ... "
	tg=$MNT_TARGET/dev; is_mnt=`cat /proc/mounts | grep " $tg "`
	if [ -z "$is_mnt" ]; then
		[ ! -d "$tg" ] && mkdir -p $tg
		mount -o bind /dev $tg
		[ $? -eq 0 ] && msg "done" || msg "fail"
	else
		msg "skip"
	fi
	
	msg -n "/dev/pts ... "
	tg=$MNT_TARGET/dev/pts; is_mnt=`cat /proc/mounts | grep " $tg "`
	if [ -z "$is_mnt" ]; then
		[ ! -d "$tg" ] && mkdir -p $tg
		mount -o "mode=0620,gid=5" -t devpts devpts $tg
		[ $? -eq 0 ] && msg "done" || msg "fail"
	else
		msg "skip"
	fi
	
	DISKS=`echo "$CUSTOM_MOUNT" | tr ',;' ' '`
	for disk in $DISKS
	do
		disk_name=`basename /root/$disk`
		msg -n "/mnt/$disk_name ... "
		tg=$MNT_TARGET/mnt/$disk_name
		is_tg=`cat /proc/mounts | grep " $tg "`
		if [ -z "$is_tg" -a -d "$disk" ]; then
			[ ! -d "$tg" ] && mkdir -p $tg
			mount -o bind $disk $tg
			[ $? -eq 0 ] && msg "done" || msg "fail"
			continue
		fi
		if [ -z "$is_tg" -a -e "$disk" ]; then
			[ ! -d "$tg" ] && mkdir -p $tg
			mount -o rw,relatime $disk $tg
			[ $? -eq 0 ] && msg "done" || msg "fail"
		else
			msg "skip"
		fi
	done
	
	return 0
}

umount_system()
{
	msg -n "Release resources ... "
	(set -e
		for i in 1 2 3 4
		do
			[ "$i" -gt "3" ] && exit 1
			pids=`lsof | grep $MNT_TARGET | awk '{print $1}' | uniq || true`
			if [ -n "$pids" ]; then
				kill -9 $pids || true
				sleep 1
			else
				break
			fi
		done
	exit 0)
	[ $? -eq 0 ] && msg "done" || msg "fail"
	
	msg "Unmounting partitions: "
	um=0
	for i in '.*' '*'
	do
		parts=`cat /proc/mounts | awk '{print $2}' | grep "^$MNT_TARGET/$i$" | sort -r`
		for p in $parts
		do
			pp=`echo $p | sed "s|$MNT_TARGET/*|/|g"`
			msg -n "$pp ... "
			umount $p
			[ $? -eq 0 ] && msg "done" || msg "fail"
			um=1
		done
	done
	[ $um -eq 0 ] && msg "...not mounted anything"
	
	msg -n "Disassociating loop device ... "
	(set -e
		loop=`losetup | grep $IMG_TARGET | awk -F: '{print $1}' || true`
		[ -n "$loop" ] && losetup -d $loop
	exit 0)
	[ $? -eq 0 ] && msg "done" || msg "fail"
	
	return 0
}

start_system()
{
	mount_system
	[ $? -ne 0 ] && return 1

	update_system

	msg "Starting services: "
	msg -n "SSH :$SSH_PORT ... "
	if [ "$SSH_START" == "y" ]; then
		(set -e
			sed -i "s|^Port .*|Port $SSH_PORT|g" $MNT_TARGET/etc/ssh/sshd_config
			case "$DISTRIB" in
			debian|ubuntu)
				chroot $MNT_TARGET su - root -c "/etc/init.d/ssh start"
			;;
			archlinux)
				chroot $MNT_TARGET su - root -c "/etc/rc.d/sshd start"
			;;
			fedora)
				if [ -z "`ls $MNT_TARGET/etc/ssh/ | grep key`" ]; then
					chroot $MNT_TARGET su - root -c "ssh-keygen -A" || true
					echo
				fi
				chroot $MNT_TARGET su - root -c "/usr/sbin/sshd -p $SSH_PORT"
			;;
			opensuse)
				chroot $MNT_TARGET su - root -c "/etc/init.d/sshd start"
			;;
			esac
		exit 0)
		[ $? -eq 0 ] && msg "done" || msg "fail"
	else
		msg "skip"
	fi

	let vncport=5900+$VNC_DISPLAY
	msg -n "VNC :$vncport ... "	
	if [ "$VNC_START" == "y" ]; then
		(set -e
			# dbus (Debian/Ubuntu/Arch Linux)
			[ -e "$MNT_TARGET/run/dbus/pid" ] && rm $MNT_TARGET/run/dbus/pid
			# dbus (Fedora)
			[ -e "$MNT_TARGET/var/run/messagebus.pid" ] && rm $MNT_TARGET/var/run/messagebus.pid
			chroot $MNT_TARGET dbus-daemon --system --fork || true
			# TightVNC Server
			[ -e "$MNT_TARGET/tmp/.X$VNC_DISPLAY-lock" ] && rm $MNT_TARGET/tmp/.X$VNC_DISPLAY-lock
			[ -e "$MNT_TARGET/tmp/.X11-unix/X$VNC_DISPLAY" ] && rm $MNT_TARGET/tmp/.X11-unix/X$VNC_DISPLAY
			chroot $MNT_TARGET su - $USER_NAME -c "vncserver :$VNC_DISPLAY -depth $VNC_DEPTH -geometry $VNC_GEOMETRY -dpi $VNC_DPI"
		exit 0)
		[ $? -eq 0 ] && msg "done" || msg "fail"
	else
		msg "skip"
	fi
	
	msg -n "X Window System ... "	
	if [ "$XSERVER_START" == "y" ]; then
		(set -e
			chroot $MNT_TARGET su - $USER_NAME -c "export DISPLAY=$XSERVER_HOST:$XSERVER_DISPLAY; cut -d ' ' -f 6 /proc/self/stat > ~/.xsessionid; ~/.xsession"
		exit 0)
		[ $? -eq 0 ] && msg "done" || msg "fail"
	else
		msg "skip"
	fi
	
	SCRIPTS=`echo "$CUSTOM_STARTUP" | tr ',;' ' '`
	for script in $SCRIPTS
	do
		msg -n "$script ... "
		(set -e
			chroot $MNT_TARGET su - root -c "$script start"
		exit 0)
		[ $? -eq 0 ] && msg "done" || msg "fail"
	done
	
	return 0
}

stop_system()
{
	msg "Stopping services: "
	
	msg -n "SSH ... "
	if [ "$SSH_START" == "y" ]; then
		(set -e
			case "$DISTRIB" in
			debian|ubuntu)
				chroot $MNT_TARGET su - root -c "/etc/init.d/ssh stop"
			;;
			archlinux)
				chroot $MNT_TARGET su - root -c "/etc/rc.d/sshd stop"
			;;
			fedora)
				chroot $MNT_TARGET su - root -c 'kill -9 `cat /var/run/sshd.pid`'
			;;
			opensuse)
				chroot $MNT_TARGET su - root -c "/etc/init.d/sshd stop"
			;;
			esac
			sleep 1
			pkill -9 sshd || true
		exit 0)
		[ $? -eq 0 ] && msg "done" || msg "fail"
	else
		msg "skip"
	fi

	msg -n "VNC ... "	
	if [ "$VNC_START" == "y" ]; then
		(set -e
			chroot $MNT_TARGET su - $USER_NAME -c "vncserver -kill :$VNC_DISPLAY"
			sleep 1
			pkill -9 X*vnc || true
		exit 0)
		[ $? -eq 0 ] && msg "done" || msg "fail"
	else
		msg "skip"
	fi
	
	msg -n "X Window System ... "	
	if [ "$XSERVER_START" == "y" ]; then
		(set -e
			chroot $MNT_TARGET su - $USER_NAME -c 'kill -9 -$(cat ~/.xsessionid)'
		exit 0)
		[ $? -eq 0 ] && msg "done" || msg "fail"
	else
		msg "skip"
	fi
	
	SCRIPTS=`echo "$CUSTOM_STARTUP" | tr ',;' ' '`
	for script in $SCRIPTS
	do
		msg -n "$script ... "
		(set -e
			chroot $MNT_TARGET su - root -c "$script stop"
		exit 0)
		[ $? -eq 0 ] && msg "done" || msg "fail"
	done
	
	umount_system
	[ $? -ne 0 ] && return 1
	
	return 0
}

chroot_system()
{
	is_mnt=`cat /proc/mounts | grep " $MNT_TARGET "`
	if [ -z "$is_mnt" ]; then
		mount_system
		[ $? -ne 0 ] && return 1
	fi
	
	update_system
	
	chroot $MNT_TARGET /bin/bash 1>&3 2>&3
	[ $? -ne 0 ] && return 1
	
	return 0
}

install_system()
{
	prepare_system
	[ $? -ne 0 ] && return 1

	mount_system
	[ $? -ne 0 ] && return 1

	case "$DISTRIB" in
	debian|ubuntu)
		msg "Installing GNU/Linux system: "
		
		[ -z "$DEBOOTSTRAP_DIR" ] && DEBOOTSTRAP_DIR=${ENV_DIR%/}/deploy/debootstrap
		export DEBOOTSTRAP_DIR
		debootstrap --no-check-gpg --arch $ARCH --foreign --extractor=ar --include=locales,openssh-server,sudo,man-db $SUITE $MNT_TARGET $MIRROR 1>&3 2>&3
		[ $? -ne 0 ] && return 1

		unset DEBOOTSTRAP_DIR
		chroot $MNT_TARGET /debootstrap/debootstrap --second-stage 1>&3 2>&3
		[ $? -ne 0 ] && return 1
	;;
	archlinux)
		#wget -O - $MIRROR | tar xzf - -C $MNT_TARGET
		#[ $? -ne 0 ] && return 1
		
		msg "Installing GNU/Linux system: "
		
		BASIC_PACKAGES="acl archlinux-keyring attr bash bzip2 ca-certificates coreutils cracklib curl db dirmngr e2fsprogs expat findutils gawk gcc-libs gdbm glibc gmp gnupg gpgme grep libarchive libassuan libcap libgcrypt libgpg-error libgssglue libksba libldap libsasl libssh2 libtirpc linux-api-headers lzo2 ncurses openssl pacman pacman-mirrorlist pam pambase perl pinentry pth readline run-parts sed shadow tzdata util-linux xz zlib"
		REPO="${MIRROR%/}/$ARCH/core"
		CACHE_DIR="$MNT_TARGET/var/cache/pacman/pkg"
		
		msg -n "Preparing for deployment ... "
		(set -e
			cd $MNT_TARGET
			mkdir etc
			echo "root:x:0:0:root:/root:/bin/bash" > etc/passwd
			echo "root:x:0:" > etc/group
			touch etc/fstab
			mkdir tmp; chmod 01777 tmp
			ln -s usr/lib lib
			mkdir -p $CACHE_DIR
		exit 0)
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }
		
		msg -n "Retrieving packages list ... "
		PKG_LIST=`wget -q -O - "$REPO/" | sed -n '/<a / s/^.*<a [^>]*href="\([^\"]*\)".*$/\1/p' | awk -F'/' '{print $NF}' | sort -rn`
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }

		msg "Retrieving base packages: "
		for PACKAGE in $BASIC_PACKAGES; do
			msg -n "$PACKAGE ... "
    		FILE=`echo "$PKG_LIST" | grep -m1 -e "^$PACKAGE-[[:digit:]].*\.xz$" -e "^$PACKAGE-[[:digit:]].*\.gz$"`
    		test "$FILE" || { msg "fail"; return 1; }
    		#echo "downloading ${FILE}... "
    		for i in 1 2 3
    		do
    			wget -q -c -O $CACHE_DIR/$FILE $REPO/$FILE
    			[ $? -eq 0 ] && break
    			sleep 30s
    		done
    		#echo "unpacking ${FILE}... "
			case "$FILE" in
    		*.gz) tar xzf $CACHE_DIR/$FILE -C $MNT_TARGET;;
    		*.xz) xz -dc $CACHE_DIR/$FILE | tar x -C $MNT_TARGET;;
    		*) msg "fail"; return 1;;
			esac
			[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }
		done
		
		msg "Preconfigure system: "
		configure_system dns mtab repository
		
		msg "Installing base packages: "
		(set -e
			chroot $MNT_TARGET /usr/bin/pacman --noconfirm -Sy
			EXTRA_PACKAGES=`chroot $MNT_TARGET /usr/bin/pacman --noconfirm -Sg base | awk '{print $2}' | grep -v -e 'linux' -e 'kernel'`
			chroot $MNT_TARGET /usr/bin/pacman --noconfirm -Sqf $BASIC_PACKAGES $EXTRA_PACKAGES initscripts sudo openssh
		exit 0) 1>&3 2>&3
		[ $? -ne 0 ] && return 1
		
		msg -n "Clearing cache ... "
		(set -e
			rm -f $CACHE_DIR/* `find $MNT_TARGET -type f -name "*.pacorig"`
		exit 0)
		[ $? -eq 0 ] && msg "done" || msg "fail"
	;;
	fedora)
		msg "Installing GNU/Linux system: "
		
		case "$SUITE" in
		17)
			BASIC_PACKAGES="acl attr audit audit-libs avahi-autoipd basesystem bash bind-libs bind-libs-lite bind-license bind-utils bzip2 bzip2-libs ca-certificates checkpolicy chkconfig coreutils cpio cracklib cracklib-dicts crda cronie cronie-anacron crontabs cryptsetup-libs curl cyrus-sasl-lib db4 dbus dbus-glib dbus-libs device-mapper device-mapper-libs dhclient dhcp-common dhcp-libs diffutils dnsmasq dosfstools dracut e2fsprogs e2fsprogs-libs elfutils-libelf ethtool expat fedora-release fedora-release-notes file file-libs filesystem findutils fipscheck fipscheck-lib gamin gawk gdbm glib2 glibc glibc-common gmp gnupg2 gpgme grep groff groff-base gzip hardlink hostname hwdata info initscripts iproute iptables iputils iw kbd kbd-misc keyutils keyutils-libs kmod kmod-libs krb5-libs less libacl libassuan libattr libblkid libcap libcap-ng libcom_err libcurl libdaemon libdb libdb-utils libedit libevent libffi libgcc libgcrypt libgpg-error libgssglue libgudev1 libidn libmount libnfsidmap libnl libnl3 libpcap libpipeline libpwquality libselinux libselinux-utils libsemanage libsepol libss libssh2 libsss_sudo libstdc++ libtirpc libudev libusb1 libuser libutempter libuuid libxml2 linux-atm-libs logrotate lua m4 man-db man-pages mingetty mobile-broadband-provider-info ncurses ncurses-base ncurses-libs net-tools newt newt-python nfs-utils nspr nss nss-myhostname nss-softokn nss-softokn-freebl nss-sysinit nss-tools nss-util ntpdate openldap openssh openssh-clients openssh-server openssl pam parted passwd pciutils-libs pcre pinentry pkgconfig policycoreutils popt ppp procps psmisc pth pygpgme python python-chardet python-iniparse python-kitchen python-libs python-pycurl python-urlgrabber readline rootfiles rootfs-resize rpcbind rpm rpm-build-libs rpm-libs rpm-python rsyslog sed selinux-policy selinux-policy-targeted setserial setup shadow-utils shared-mime-info slang sqlite sudo systemd systemd-sysv sysvinit-tools tar tcp_wrappers-libs tzdata udev usbutils ustr util-linux vim-minimal wget wireless-tools wpa_supplicant xz xz-libs yum yum-metadata-parser yum-utils zlib"
		;;
		18)
			BASIC_PACKAGES="acl attr audit audit-libs avahi-autoipd avahi-libs basesystem bash bind-libs bind-libs-lite bind-license bind-utils bzip2 bzip2-libs c-ares ca-certificates checkpolicy chkconfig coreutils cpio cracklib cracklib-dicts crda cronie cronie-anacron crontabs cryptsetup-libs cups-libs curl cyrus-sasl-gssapi cyrus-sasl-lib dbus dbus-glib dbus-libs device-mapper device-mapper-libs dhclient dhcp-common dhcp-libs diffutils dnsmasq dosfstools dracut e2fsprogs e2fsprogs-libs elfutils-libelf ethtool expat fedora-release fedora-release-notes file file-libs filesystem findutils fipscheck fipscheck-lib gamin gawk gdbm glib2 glibc glibc-common gmp gnupg2 gnutls gpgme grep groff groff-base gzip hardlink hostname hwdata info initscripts iproute iptables iputils iw jbigkit-libs json-c kbd kbd-misc keyutils keyutils-libs kmod kmod-libs kpartx krb5-libs less libacl libassuan libattr libbasicobjects libblkid libbsd libcap libcap-ng libcollection libcom_err libcurl libdaemon libdb libdb-utils libdb4 libdhash libedit libee libestr libevent libffi libgcc libgcrypt libgpg-error libgssglue libgudev1 libidn libini_config libipa_hbac libjpeg-turbo libldb liblognorm libmicrohttpd libmount libnfsidmap libnl libnl3 libpath_utils libpcap libpipeline libpng libpwquality libref_array libselinux libselinux-utils libsemanage libsepol libss libssh2 libsss_idmap libsss_sudo libstdc++ libtalloc libtasn1 libtdb libtevent libtiff libtirpc libusbx libuser libutempter libuuid libwbclient libxml2 linux-atm-libs logrotate lua m4 man-db man-pages mingetty mobile-broadband-provider-info ncurses ncurses-base ncurses-libs net-tools newt newt-python nfs-utils nspr nss nss-myhostname nss-softokn nss-softokn-freebl nss-sysinit nss-tools nss-util ntpdate openldap openssh openssh-clients openssh-server openssl-libs p11-kit pam parted passwd pciutils-libs pcre pinentry pkgconfig policycoreutils popt procps-ng psmisc pth pygpgme pyliblzma pyparted pytalloc python python-chardet python-iniparse python-kitchen python-libs python-psutil python-pycurl python-urlgrabber qrencode-libs quota quota-nls readline rootfiles rootfs-resize rpcbind rpm rpm-build-libs rpm-libs rpm-python rsyslog samba-libs sed selinux-policy selinux-policy-targeted setserial setup shadow-utils shared-mime-info slang sqlite sssd sssd-client sudo systemd systemd-libs systemd-sysv sysvinit-tools tar tcp_wrappers tcp_wrappers-libs tzdata usbutils ustr util-linux vim-minimal wget wireless-tools wpa_supplicant xz xz-libs yum yum-metadata-parser yum-utils zlib"
		;;
		esac
		REPO="${MIRROR%/}/${SUITE}/Everything/${ARCH}/os"
		PKG_LIST="$MNT_TARGET/tmp/packages.list"

		msg -n "Preparing for deployment ... "
		(set -e
			cd $MNT_TARGET
			mkdir etc
			echo "root:x:0:0:root:/root:/bin/bash" > etc/passwd
			echo "root:x:0:" > etc/group
			touch etc/fstab
			mkdir -p usr/bin usr/sbin usr/lib
			ln -sf usr/bin; ln -sf usr/sbin; ln -sf usr/lib
			mkdir tmp; chmod 01777 tmp
		exit 0)
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }
		
		msg -n "Retrieving packages list ... "
		(set -e
			REPODATA_FILE=`wget -q -O - $REPO/repodata | sed -n '/<a / s/^.*<a [^>]*href="\([^\"]*\-primary\.xml\.gz\)".*$/\1/p'`
			wget -q -O - $REPO/repodata/$REPODATA_FILE | gzip -dc | sed -n '/<location / s/^.*<location [^>]*href="\([^\"]*\)".*$/\1/p' > $PKG_LIST
		exit 0)
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }
		
		msg "Retrieving base packages: "
		for PACKAGE in $BASIC_PACKAGES; do
			msg -n "$PACKAGE ... "
			PKG_URL=`cat $PKG_LIST | grep -m1 -e "^.*/$PACKAGE-[0-9][0-9\.\-].*\.rpm$"`
			#test "$PKG_URL" || { msg "fail"; return 1; }
			FILE=`basename $PKG_URL`
			#echo "downloading ${FILE}... "
			for i in 1 2 3
			do
				wget -q -c -O $MNT_TARGET/tmp/$FILE $REPO/$PKG_URL
				[ $? -eq 0 ] && break
				sleep 30s
			done
			#echo "unpacking ${FILE}... "
			(cd $MNT_TARGET; rpm2cpio $MNT_TARGET/tmp/$FILE | cpio -idmu)
			[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }
		done

		msg "Installing base packages: "
		chroot $MNT_TARGET /bin/rpm -iv --force --nosignature --nodeps /tmp/*.rpm 1>&3 2>&3
		msg -n "Updating packages database ... "
		chroot $MNT_TARGET /bin/rpm -i --force --nosignature --nodeps --justdb /tmp/*.rpm
		[ $? -eq 0 ] && msg "done" || msg "fail"
		# to fix cap_set_file failed
		#chroot $MNT_TARGET /bin/rpm -i --nosignature --justdb /tmp/glibc-common-*.rpm /tmp/iputils-*.rpm /tmp/systemd-*.rpm
		# to fix chown32(/dev/pts/*) operation not permitted
		chmod 04755 $MNT_TARGET/usr/libexec/pt_chown
		chmod 04755 $MNT_TARGET/usr/bin/ping
		chmod 04755 $MNT_TARGET/usr/bin/systemd-detect-virt
		# clean cache
		rm -rf $MNT_TARGET/tmp/*
		
		#msg "Installing base packages: "
		#for FILE in `cd $CACHE_DIR && ls *.rpm`; do
		#	msg -n "$FILE ... "
		#	chroot $MNT_TARGET /bin/rpm -i --nodeps --force /tmp/$FILE
		#	[ $? -eq 0 ] && msg "done" || msg "fail"
		#done
		
		#msg "Preconfigure system: "
		#configure_system dns mtab repository
		
		#msg "Installing base system: "
		#chroot $MNT_TARGET /usr/bin/yum groupinstall "Base" --nogpgcheck --skip-broken -y 1>&3 2>&3
		
		#msg -n "Clearing cache ... "
		#chroot $MNT_TARGET /usr/bin/yum clean all
    	#[ $? -eq 0 ] && msg "done" || msg "fail"
	;;
	opensuse)
		msg "Installing GNU/Linux system: "

		BASIC_PACKAGES="aaa_base aaa_base-extras autoyast2-installation bash bind-libs bind-utils branding-openSUSE bridge-utils bzip2 coreutils cpio cracklib cracklib-dict-full cron cronie cryptsetup curl cyrus-sasl dbus-1 dbus-1-x11 device-mapper dhcpcd diffutils dirmngr dmraid e2fsprogs elfutils file filesystem fillup findutils fontconfig gawk gio-branding-openSUSE glib2-tools glibc glibc-extra glibc-i18ndata glibc-locale gnu-unifont-bitmap-fonts gpg2 grep groff gzip hwinfo ifplugd info initviocons iproute2 iputils kbd kpartx krb5 less libX11-6 libX11-data libXau6 libXext6 libXft2 libXrender1 libacl1 libadns1 libaio1 libasm1 libassuan0 libattr1 libaudit1 libaugeas0 libblkid1 libblocxx6 libbz2-1 libcairo2 libcap-ng0 libcap2 libcom_err2 libcrack2 libcryptsetup4 libcurl4 libdaemon0 libdb-4_8 libdbus-1-3 libdrm2 libdw1 libedit0 libelf0 libelf1 libestr0 libexpat1 libext2fs2 libffi4 libfreetype6 libgcc_s1 libgcrypt11 libgdbm4 libgio-2_0-0 libglib-2_0-0 libgmodule-2_0-0 libgmp10 libgnutls28 libgobject-2_0-0 libgpg-error0 libgssglue1 libharfbuzz0 libhogweed2 libicu49 libidn11 libiw30 libjson0 libkeyutils1 libkmod2 libksba8 libldap-2_4-2 liblua5_1 liblzma5 libmagic-data libmagic1 libmicrohttpd10 libmodman1 libmount1 libncurses5 libncurses6 libnettle4 libnl-1_1 libopenssl1_0_0 libp11-kit0 libpango-1_0-0 libparted0 libpci3 libpcre1 libpipeline1 libpixman-1-0 libply-boot-client2 libply-splash-core2 libply-splash-graphics2 libply2 libpng15-15 libpolkit0 libpopt0 libprocps1 libproxy1 libpth20 libpython2_7-1_0 libqrencode3 libreadline6 libreiserfs-0_3-0 libselinux1 libsemanage1 libsepol1 libsolv-tools libssh2-1 libstdc++6 libstorage4 libtasn1 libtasn1-6 libtirpc1 libudev1 libusb-0_1-4 libusb-1_0-0 libustr-1_0-1 libuuid1 libxcb-render0 libxcb-shm0 libxcb1 libxml2-2 libxtables9 libyui-ncurses-pkg4 libyui-ncurses4 libyui4 libz1 libzio1 libzypp limal limal-perl logrotate lsscsi lvm2 man man-pages mdadm mkinitrd module-init-tools multipath-tools ncurses-utils net-tools netcfg openSUSE-build-key openSUSE-release openSUSE-release-ftp openslp openssh openssl pam pam-config pango-tools parted pciutils pciutils-ids perl perl-Bootloader perl-Config-Crontab perl-XML-Parser perl-XML-Simple perl-base perl-gettext permissions pinentry pkg-config plymouth plymouth-branding-openSUSE plymouth-plugin-label plymouth-plugin-script plymouth-scripts polkit procps python-base rpcbind rpm rsyslog sed shadow shared-mime-info sudo suse-module-tools sysconfig sysfsutils syslog-service systemd systemd-presets-branding-openSUSE systemd-sysvinit sysvinit-tools tar tcpd terminfo-base timezone tunctl u-boot-tools udev unzip update-alternatives util-linux vim vim-base vlan wallpaper-branding-openSUSE wireless-tools wpa_supplicant xz yast2 yast2-bootloader yast2-core yast2-country yast2-country-data yast2-dbus-client yast2-firstboot yast2-hardware-detection yast2-installation yast2-mouse yast2-packager yast2-perl-bindings yast2-pkg-bindings yast2-proxy yast2-slp yast2-storage yast2-trans-stats yast2-transfer yast2-update yast2-xml yast2-ycp-ui-bindings zypper"
		REPO="${MIRROR%/}/${ARCH}/${SUITE}/repo/oss/suse"
		PKG_LIST="$MNT_TARGET/tmp/packages.list"

		msg -n "Preparing for deployment ... "
		(set -e
			cd $MNT_TARGET
			mkdir etc
			echo "root:x:0:0:root:/root:/bin/bash" > etc/passwd
			echo "root:x:0:" > etc/group
			touch etc/fstab
			mkdir tmp; chmod 01777 tmp
		exit 0)
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }
		
		msg -n "Retrieving packages list ... "
		(set -e
			REPODATA_FILE=`wget -q -O - $REPO/repodata | sed -n '/<a / s/^.*<a [^>]*href="\([^\"]*\-primary\.xml\.gz\)".*$/\1/p'`
			wget -q -O - $REPO/repodata/$REPODATA_FILE | gzip -dc | sed -n '/<location / s/^.*<location [^>]*href="\([^\"]*\)".*$/\1/p' > $PKG_LIST
		exit 0)
		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }
		
		msg "Retrieving base packages: "
		for PACKAGE in $BASIC_PACKAGES; do
			msg -n "$PACKAGE ... "
    		PKG_URL=`cat $PKG_LIST | grep -e "^arm" -e "^noarch" | grep -m1 -e "^.*/$PACKAGE-[0-9s][0-9\.].*\.rpm$"`
    		test "$PKG_URL" || { msg "fail"; return 1; }
    		FILE=`basename $PKG_URL`
    		#echo "downloading ${FILE}... "
    		for i in 1 2 3
    		do
    			wget -q -c -O $MNT_TARGET/tmp/$FILE $REPO/$PKG_URL
    			[ $? -eq 0 ] && break
    			sleep 30s
    		done
    		#echo "unpacking ${FILE}... "
    		(cd $MNT_TARGET; rpm2cpio $MNT_TARGET/tmp/$FILE | cpio -idmu)
    		[ $? -eq 0 ] && msg "done" || { msg "fail"; return 1; }
		done

		msg "Installing base packages: "
		chroot $MNT_TARGET /bin/rpm -iv --force --nosignature --nodeps /tmp/*.rpm 1>&3 2>&3
		# clean cache
		rm -rf $MNT_TARGET/tmp/*
	;;
	esac

	configure_system
	[ $? -ne 0 ] && return 1

	return 0
}

uninstall_system()
{
	umount_system
	[ $? -ne 0 ] && return 1
	
	#msg -n "Removing disk image ... "
	#(set -e
	#	[ -f "$IMG_TARGET" ] && rm $IMG_TARGET
	#	[ -d "$MNT_TARGET" ] && rmdir $MNT_TARGET
	#exit 0)
	#[ $? -eq 0 ] && msg "done" || msg "fail"
	
	msg -n "Removing symlink ... "
	(set -e
		if [ -e "/system/bin/linuxdeploy" ]; then
			rm -f /system/bin/linuxdeploy || 
				{ mount -o rw,remount /system;	rm -f /system/bin/linuxdeploy; mount -o ro,remount /system;	}
		fi
	exit 0)
	[ $? -eq 0 ] && msg "done" || msg "fail"
			
	msg -n "Removing environment ... "
	(set -e
		rm -rf ${ENV_DIR%/}/mnt ${ENV_DIR%/}/deploy ${ENV_DIR%/}/etc ${ENV_DIR%/}/bin
		[ -d "$ENV_DIR" ] && rmdir $ENV_DIR
	exit 0)
	[ $? -eq 0 ] && msg "done" || msg "fail"
	
	return 0
}

status_system()
{
	msg "Linux Deploy version: $(cat $ENV_DIR/etc/version)"
	msg "Android version: $(getprop ro.build.version.release)"
	msg "Device: $(getprop ro.product.brand) $(getprop ro.product.device)"
	msg "CPU: $(cat /proc/cpuinfo | grep ^Processor | awk -F': ' '{print $2}')"
	msg "$(cat /proc/meminfo | grep ^MemTotal)"
	msg "$(cat /proc/meminfo | grep ^SwapTotal)"
	msg -n "Support loop device: "
	[ -n "`ls /dev/block/loop0`" ] && msg "yes" || msg "no"
	msg "Supported file systems: $(cat /proc/filesystems | grep -v nodev | sort | xargs)"
	LINUX_VERSION=`[ -r "$MNT_TARGET/etc/os-release" ] && . "$MNT_TARGET/etc/os-release"; [ -n "$PRETTY_NAME" ] && echo "$PRETTY_NAME" || echo "unknown"`
	msg "Active system: $LINUX_VERSION"
	msg "Running services: "
	msg -n "* SSH: "
	[ -n "`ps | grep '/usr/sbin/sshd' | grep -v grep`" ] && msg "yes" || msg "no"
	msg -n "* VNC: "
	[ -n "`ps | grep 'X*vnc' | grep -v grep`" ] && msg "yes" || msg "no"
	msg "Mounted parts on Linux: "
	for i in `cat /proc/mounts | grep $MNT_TARGET | awk '{print $2}' | sed "s|$MNT_TARGET/*|/|g"`
	do
		msg "* $i"
		is_mounted=1
	done
	[ -z "$is_mounted" ] && msg " ...not mounted anything"
	msg "Available mount points: "
	for p in `cat /proc/mounts | grep ^/dev/ | grep -v $MNT_TARGET | grep -v ' /mnt/asec/' | grep -v ' /mnt/secure/' | awk '{print $2":"$3}'`
	do
		PART=`echo $p | awk -F: '{print $1}'`
		FSTYPE=`echo $p | awk -F: '{print $2}'`
		BLOCK_SIZE=`stat -c '%s' -f $PART`
		AVAILABLE=`stat -c '%a' -f $PART | awk '{printf("%.1f",$1*'$BLOCK_SIZE'/1024/1024/1024)}'`
		TOTAL=`stat -c '%b' -f $PART | awk '{printf("%.1f",$1*'$BLOCK_SIZE'/1024/1024/1024)}'`
		if [ -n "$AVAILABLE" -a -n "$TOTAL" ]; then
			msg "* $PART: $AVAILABLE/$TOTAL GB ($FSTYPE)"
		fi
	done
	msg "Available partitions: "
	for i in /sys/block/*/dev
	do
		if [ -f $i ]; then
			DEVNAME=$(echo $i | sed -e 's@/dev@@' -e 's@.*/@@')
			[ -e "/dev/$DEVNAME" ] && DEVPATH=/dev/$DEVNAME
			[ -e "/dev/block/$DEVNAME" ] && DEVPATH=/dev/block/$DEVNAME
			[ -n "$DEVPATH" ] && PARTS=`fdisk -l $DEVPATH | grep ^/dev/ | awk '{print $1}'`
			for PART in $PARTS
			do
				SIZE=`fdisk -l $PART | grep 'Disk.*bytes' | awk '{ sub(/,/,""); print $3" "$4}'`
				BOOT=`fdisk -l $DEVPATH | grep ^$PART | awk '{print $2}'`
				if [ "$BOOT" = "*" ]; then
					TYPE=`fdisk -l $DEVPATH | grep ^$PART | awk '{str=$7; for (i=8;i<=11;i++) if ($i!="") str=str" "$i; printf("%s",str)}'`
				else
					TYPE=`fdisk -l $DEVPATH | grep ^$PART | awk '{str=$6; for (i=7;i<=10;i++) if ($i!="") str=str" "$i; printf("%s",str)}'`
				fi
				msg "* $PART: $SIZE ($TYPE)"
				is_partitions=1
			done
		fi
	done
	[ -z "$is_partitions" ] && msg " ...no available partitions"
}

#################################################

case "$1" in
mount)
	msg ">>> begin: mount"
	mount_system
	msg "<<< end: mount"
;;
umount)
	msg ">>> begin: umount"
	umount_system
	msg "<<< end: umount"
;;
install)
	msg ">>> begin: install"
	install_system
	msg "<<< end: install"
;;
configure)
	msg ">>> begin: configure"
	mount_system
	[ $? -eq 0 ] && configure_system
	msg "<<< end: configure"
;;
uninstall)
	msg ">>> begin: uninstall"
	uninstall_system
	msg "<<< end: uninstall"
;;
start)
	msg ">>> begin: start"
	start_system
	msg "<<< end: start"
;;
stop)
	msg ">>> begin: stop"
	stop_system
	msg "<<< end: stop"
;;
shell)
	msg ">>> begin: shell"
	chroot_system
	msg "<<< end: shell"
;;
status)
	msg ">>> begin: status"
	status_system
	msg "<<< end: status"
;;
*)
	msg "Usage: $0 <mount|umount|install|configure|uninstall|start|stop|shell|status>"
;;
esac
